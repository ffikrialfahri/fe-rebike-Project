Directory Structure:

└── be-rebike
    └── src
        ├── main
        │   └── java
        │       └── com
        │           └── doaibu
        │               └── rebikeapi
        │                   ├── config
        │                   │   ├── DataInitializer.java
        │                   │   ├── JwtProperties.java
        │                   │   ├── MidtransConfig.java
        │                   │   ├── OpenApiConfig.java
        │                   │   ├── PasswordEncoderConfig.java
        │                   │   └── SecurityConfig.java
        │                   ├── constant
        │                   │   ├── BikeStatus.java
        │                   │   ├── BookingStatus.java
        │                   │   ├── Endpoint.java
        │                   │   ├── PaymentStatus.java
        │                   │   ├── PayoutStatus.java
        │                   │   └── UserRole.java
        │                   ├── controller
        │                   │   ├── AdminController.java
        │                   │   ├── AuthController.java
        │                   │   ├── CustomerController.java
        │                   │   ├── PartnerController.java
        │                   │   ├── PublicController.java
        │                   │   └── UserController.java
        │                   ├── dto
        │                   │   ├── request
        │                   │   │   ├── BikeRequest.java
        │                   │   │   ├── ChangePasswordRequest.java
        │                   │   │   ├── ConfirmTransactionRequest.java
        │                   │   │   ├── CreatePaymentRequest.java
        │                   │   │   ├── ForgotPasswordRequest.java
        │                   │   │   ├── LoginRequest.java
        │                   │   │   ├── PartnerDetailUpdateRequest.java
        │                   │   │   ├── PartnerUpdateRequest.java
        │                   │   │   ├── PayoutRequest.java
        │                   │   │   ├── PickupPointRequest.java
        │                   │   │   ├── ProcessPayoutRequest.java
        │                   │   │   ├── RegisterCustomerRequest.java
        │                   │   │   ├── RegisterPartnerRequest.java
        │                   │   │   ├── ResendOtpRequest.java
        │                   │   │   ├── ResetPasswordRequest.java
        │                   │   │   ├── ResetPasswordWithOtpRequest.java
        │                   │   │   ├── TransactionRequest.java
        │                   │   │   ├── UpdateBikeStatusRequest.java
        │                   │   │   ├── VerifyOtpRequest.java
        │                   │   │   ├── VerifyPartnerRequest.java
        │                   │   │   └── VerifyPaymentRequest.java
        │                   │   └── response
        │                   │       ├── other
        │                   │       │   ├── CommonResponse.java
        │                   │       │   └── PagedResponse.java
        │                   │       ├── AdminPartnerResponse.java
        │                   │       ├── BikeDetailResponse.java
        │                   │       ├── BikeResponse.java
        │                   │       ├── DashboardSummaryResponse.java
        │                   │       ├── FinancialSummaryResponse.java
        │                   │       ├── LoginResponse.java
        │                   │       ├── MidtransChargeResponse.java
        │                   │       ├── PartnerDetailResponse.java
        │                   │       ├── PayoutResponse.java
        │                   │       ├── PickupPointResponse.java
        │                   │       ├── RegisterResponse.java
        │                   │       ├── RevenueTrendResponse.java
        │                   │       ├── TransactionDetailResponse.java
        │                   │       ├── TransactionResponse.java
        │                   │       └── UserResponse.java
        │                   ├── entity
        │                   │   ├── Bike.java
        │                   │   ├── Partner.java
        │                   │   ├── Payment.java
        │                   │   ├── Payout.java
        │                   │   ├── PickupPoint.java
        │                   │   ├── Role.java
        │                   │   ├── Transaction.java
        │                   │   ├── UsagePolicy.java
        │                   │   └── User.java
        │                   ├── exception
        │                   │   ├── CustomException.java
        │                   │   └── GlobalExceptionHandler.java
        │                   ├── repository
        │                   │   ├── BikeRepository.java
        │                   │   ├── PartnerRepository.java
        │                   │   ├── PaymentRepository.java
        │                   │   ├── PayoutRepository.java
        │                   │   ├── PickupPointRepository.java
        │                   │   ├── RoleRepository.java
        │                   │   ├── TransactionRepository.java
        │                   │   └── UserRepository.java
        │                   ├── security
        │                   │   ├── CustomOAuth2AuthenticationSuccessHandler.java
        │                   │   ├── JwtAuthFilter.java
        │                   │   └── JwtUtil.java
        │                   ├── service
        │                   │   ├── impl
        │                   │   │   ├── AdminDashboardServiceImpl.java
        │                   │   │   ├── BikeServiceImpl.java
        │                   │   │   ├── EmailServiceImpl.java
        │                   │   │   ├── MidtransServiceImpl.java
        │                   │   │   ├── PartnerServiceImpl.java
        │                   │   │   ├── PayoutServiceImpl.java
        │                   │   │   ├── PickupPointServiceImpl.java
        │                   │   │   ├── RoleServiceImpl.java
        │                   │   │   ├── TransactionServiceImpl.java
        │                   │   │   ├── UserDetailsServiceImpl.java
        │                   │   │   └── UserServiceImpl.java
        │                   │   ├── AdminDashboardService.java
        │                   │   ├── BikeService.java
        │                   │   ├── EmailService.java
        │                   │   ├── MidtransService.java
        │                   │   ├── PartnerService.java
        │                   │   ├── PayoutService.java
        │                   │   ├── PickupPointService.java
        │                   │   ├── RoleService.java
        │                   │   ├── TransactionService.java
        │                   │   └── UserService.java
        │                   ├── util
        │                   │   ├── ResponseUtil.java
        │                   │   └── TokenHolder.java
        │                   └── RebikeApplication.java
        └── test
            └── java
                └── com
                    └── doaibu
                        └── rebikeapi
                            └── RebikeApplicationTests.java



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/config/DataInitializer.java
---

package com.doaibu.rebikeapi.config;

import com.doaibu.rebikeapi.constant.UserRole;
import com.doaibu.rebikeapi.entity.Partner;
import com.doaibu.rebikeapi.entity.Role;
import com.doaibu.rebikeapi.entity.User;
import com.doaibu.rebikeapi.repository.UserRepository;
import com.doaibu.rebikeapi.service.RoleService;
import lombok.RequiredArgsConstructor;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@Component
@RequiredArgsConstructor
public class DataInitializer implements CommandLineRunner {

    private final UserRepository userRepository;
    private final RoleService roleService;
    private final PasswordEncoder passwordEncoder;

    @Override
    public void run(String... args) throws Exception {
        if (!userRepository.existsByEmail("admin@example.com")) {
            Set<Role> adminRole = new HashSet<>();
            adminRole.add(roleService.getOrCreate(UserRole.ADMIN));

            User adminUser = User.builder()
                    .firstName("Admin").lastName("Rebike").username("admin")
                    .email("admin@example.com").password(passwordEncoder.encode("password"))
                    .phoneNumber("081234567890").roles(adminRole).createdAt(LocalDateTime.now())
                    .isAccountNonExpired(true).isAccountNonLocked(true)
                    .isCredentialsNonExpired(true).isEnabled(true).isEmailVerified(true)
                    .build();
            userRepository.save(adminUser);
        }

        if (!userRepository.existsByEmail("mitra@example.com")) {
            Set<Role> partnerRole = new HashSet<>();
            partnerRole.add(roleService.getOrCreate(UserRole.PARTNER));

            User partnerUser = User.builder()
                    .firstName("Mitra").lastName("Satu").username("mitra")
                    .email("mitra@example.com").password(passwordEncoder.encode("password"))
                    .phoneNumber("089876543210").roles(partnerRole).createdAt(LocalDateTime.now())
                    .isAccountNonExpired(true).isAccountNonLocked(true)
                    .isCredentialsNonExpired(true).isEnabled(true).isEmailVerified(true)
                    .build();

            Partner partner = Partner.builder()
                    .user(partnerUser).locationName("Rental Barokah")
                    .bankAccountName("Mitra Satu").bankAccountNumber("1234567890")
                    .bankName("BCA").isVerified(true).build();

            partnerUser.setPartnerDetail(partner);
            userRepository.save(partnerUser);
        }

        if (!userRepository.existsByEmail("customer@example.com")) {
            Set<Role> customerRole = new HashSet<>();
            customerRole.add(roleService.getOrCreate(UserRole.CUSTOMER));

            User customerUser = User.builder()
                    .firstName("Customer").lastName("Satu").username("customer")
                    .email("customer@example.com").password(passwordEncoder.encode("password"))
                    .phoneNumber("089876543217").roles(customerRole).createdAt(LocalDateTime.now())
                    .isAccountNonExpired(true).isAccountNonLocked(true)
                    .isCredentialsNonExpired(true).isEnabled(true).isEmailVerified(true)
                    .build();
            userRepository.save(customerUser);
        }

        if (!userRepository.existsByEmail("iambaehaqi@gmail.com")) {
            Set<Role> partnerRole = new HashSet<>();
            partnerRole.add(roleService.getOrCreate(UserRole.PARTNER));

            User partnerUser = User.builder()
                    .firstName("Imam").lastName("Baehaqi").username("iambaehaqi")
                    .email("iambaehaqi@gmail.com").password(passwordEncoder.encode("password"))
                    .phoneNumber("081222333444").roles(partnerRole).createdAt(LocalDateTime.now())
                    .isAccountNonExpired(true).isAccountNonLocked(true)
                    .isCredentialsNonExpired(true).isEnabled(true).isEmailVerified(true)
                    .build();

            Partner partner = Partner.builder()
                    .user(partnerUser).locationName("Baehaqi Motor")
                    .bankAccountName("Imam Baehaqi").bankAccountNumber("0987654321")
                    .bankName("Mandiri").isVerified(true).build();

            partnerUser.setPartnerDetail(partner);
            userRepository.save(partnerUser);
        }
    }
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/config/JwtProperties.java
---

package com.doaibu.rebikeapi.config;

import io.github.cdimascio.dotenv.Dotenv;
import lombok.Data;
import org.springframework.context.annotation.Configuration;

@Data
@Configuration
public class JwtProperties {
    private String secretKey;
    private long expirationMs;

    public JwtProperties() {
        Dotenv dotenv = Dotenv.load();
        
        this.secretKey = dotenv.get("JWT_SECRET_KEY");
        this.expirationMs = Long.parseLong(dotenv.get("JWT_EXPIRATION_MS"));
    }
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/config/MidtransConfig.java
---

package com.doaibu.rebikeapi.config;

import io.github.cdimascio.dotenv.Dotenv;
import lombok.Data;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;

@Configuration
@Data
public class MidtransConfig {
    private String serverKey;
    private String apiUrl;

    public MidtransConfig() {
        Dotenv dotenv = Dotenv.load();
        
        this.serverKey = dotenv.get("MIDTRANS_SERVER_KEY");
        this.apiUrl = dotenv.get("MIDTRANS_API_URL");
    }

    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }
}




---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/config/OpenApiConfig.java
---

package com.doaibu.rebikeapi.config;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class OpenApiConfig {

    @Bean
    public OpenAPI customOpenAPI() {
        final String securitySchemeName = "bearerAuth";
        return new OpenAPI()
                .addSecurityItem(new SecurityRequirement().addList(securitySchemeName))
                .components(
                        new Components()
                                .addSecuritySchemes(securitySchemeName,
                                        new SecurityScheme()
                                                .name(securitySchemeName)
                                                .type(SecurityScheme.Type.HTTP)
                                                .scheme("bearer")
                                                .bearerFormat("JWT")
                                )
                )
                .info(new Info().title("Rebike API").version("v1.0").description(
                        "Dokumentasi API lengkap untuk platform rental motor Rebike."));
    }
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/config/PasswordEncoderConfig.java
---

package com.doaibu.rebikeapi.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
public class PasswordEncoderConfig {

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/config/SecurityConfig.java
---

package com.doaibu.rebikeapi.config;

import com.doaibu.rebikeapi.constant.Endpoint;
import com.doaibu.rebikeapi.security.CustomOAuth2AuthenticationSuccessHandler;
import com.doaibu.rebikeapi.security.JwtAuthFilter;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.Arrays;

@Configuration
@EnableWebSecurity
@RequiredArgsConstructor
public class SecurityConfig {
    private final UserDetailsService userDetailsService;
    private final JwtAuthFilter jwtAuthFilter;
    private final CustomOAuth2AuthenticationSuccessHandler oauth2SuccessHandler;
    private final PasswordEncoder passwordEncoder;

    private static final String[] SWAGGER_WHITELIST = {
            "/swagger-ui.html",
            "/swagger-ui/**",
            "/v3/api-docs/**",
            "/swagger-resources/**",
            "/webjars/**"
    };

    @Bean
    public SecurityFilterChain config(HttpSecurity http) throws Exception {
        return http
                .cors(Customizer.withDefaults())
                .csrf(AbstractHttpConfigurer::disable)
                .authorizeHttpRequests(authorizeRequests -> {
                    authorizeRequests
                            .requestMatchers(SWAGGER_WHITELIST).permitAll()
                            .requestMatchers(Endpoint.AUTH + "/**", "/login/oauth2/**", "/oauth2/**").permitAll()
                            .requestMatchers(HttpMethod.GET, Endpoint.PUBLIC + "/**").permitAll()

                            .requestMatchers(Endpoint.USER + "/**").hasAnyRole("PARTNER", "ADMIN", "CUSTOMER")
                            .requestMatchers(Endpoint.PARTNER + "/**").hasRole("PARTNER")
                            .requestMatchers(Endpoint.ADMIN + "/**").hasRole("ADMIN")
                            .requestMatchers(Endpoint.CUSTOMER + "/**").hasRole("CUSTOMER")

                            .anyRequest().authenticated();
                })
                .oauth2Login(oauth -> {
                    oauth.successHandler(oauth2SuccessHandler);
                })
                .authenticationProvider(authenticationProvider())
                .addFilterAfter(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class)
                .build();
    }

    @Bean
    CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(Arrays.asList("http://localhost:5175"));
        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        configuration.setAllowedHeaders(Arrays.asList("Authorization", "Content-Type", "x-auth-token"));
        configuration.setAllowCredentials(true);
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }

    @Bean
    public DaoAuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(userDetailsService);
        authProvider.setPasswordEncoder(passwordEncoder);
        return authProvider;
    }
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/constant/BikeStatus.java
---

package com.doaibu.rebikeapi.constant;

public enum BikeStatus {
    AVAILABLE,
    PENDING,
    RENTED,
    INACTIVE
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/constant/BookingStatus.java
---

package com.doaibu.rebikeapi.constant;

public enum BookingStatus {
    PENDING,
    CONFIRMED,
    IN_PROGRESS,
    COMPLETED,
    CANCELLED
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/constant/Endpoint.java
---

package com.doaibu.rebikeapi.constant;

public class Endpoint {
    public static final String API = "/api";

    public static final String AUTH = API + "/auth";
    
    public static final String PUBLIC = API + "/public";
    
    public static final String USER = API + "/user";

    public static final String CUSTOMER = API + "/customer";
    public static final String PARTNER = API + "/partner";
    public static final String ADMIN = API + "/admin";
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/constant/PaymentStatus.java
---

package com.doaibu.rebikeapi.constant;

public enum PaymentStatus {
    UNPAID,
    PENDING_CONFIRMATION,
    PAID,
    REFUNDED
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/constant/PayoutStatus.java
---

package com.doaibu.rebikeapi.constant;

public enum PayoutStatus {
    PENDING,
    APPROVED,
    REJECTED
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/constant/UserRole.java
---

package com.doaibu.rebikeapi.constant;

public enum UserRole {
    ADMIN,
    PARTNER,
    CUSTOMER
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/controller/AdminController.java
---

package com.doaibu.rebikeapi.controller;

import com.doaibu.rebikeapi.constant.Endpoint;
import com.doaibu.rebikeapi.dto.request.PickupPointRequest;
import com.doaibu.rebikeapi.dto.request.ProcessPayoutRequest;
import com.doaibu.rebikeapi.dto.request.VerifyPartnerRequest;
import com.doaibu.rebikeapi.dto.request.VerifyPaymentRequest;
import com.doaibu.rebikeapi.dto.response.*;
import com.doaibu.rebikeapi.dto.response.other.PagedResponse;
import com.doaibu.rebikeapi.service.*;
import com.doaibu.rebikeapi.util.ResponseUtil;
import lombok.RequiredArgsConstructor;

import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping(Endpoint.ADMIN)
@RequiredArgsConstructor
public class AdminController {

    private final UserService userService;
    private final TransactionService transactionService;
    private final PickupPointService pickupPointService;
    private final PayoutService payoutService;
    private final AdminDashboardService adminDashboardService;

    @PostMapping("/partners/{partnerId}/verify")
    public ResponseEntity<?> verifyPartner(@PathVariable String partnerId,
            @RequestBody VerifyPartnerRequest request) {
        userService.verifyPartner(partnerId, request.isVerified());

        return ResponseUtil.response(
                HttpStatus.OK,
                "Partner verified successfully",
                null);
    }

    @PostMapping("/transactions/{transactionId}/verify-payment")
    public ResponseEntity<?> verifyPayment(@PathVariable String transactionId,
            @RequestBody VerifyPaymentRequest request) {
        transactionService.verifyPayment(transactionId, request.isValid(), request.getReason());
        return ResponseUtil.response(
                HttpStatus.OK,
                "Payment verification processed",
                null);
    }

    @GetMapping("/partners")
    public ResponseEntity<?> getAllPartners(@RequestParam(required = false, defaultValue = "0") int page,
                                            @RequestParam(required = false, defaultValue = "10") int size,
                                            @RequestParam(required = false, defaultValue = "firstName") String sortBy,
                                            @RequestParam(required = false, defaultValue = "asc") String sortDirection) {
        Pageable pageable = PageRequest.of(page, size, Sort.by(sortDirection.equalsIgnoreCase("asc") ?
                Sort.Direction.ASC : Sort.Direction.DESC, sortBy));

        PagedResponse<AdminPartnerResponse> response = userService.getAllPartners(pageable);
        return ResponseUtil.response(
                HttpStatus.OK,
                "All partners retrieved successfully",
                response);
    }

    @GetMapping("/partners/{partnerId}")
    public ResponseEntity<?> getPartnerById(@PathVariable String partnerId) {
        AdminPartnerResponse response = userService.getPartnerById(partnerId);
        return ResponseUtil.response(
                HttpStatus.OK,
                "Partner details retrieved successfully",
                response);
    }

    @GetMapping("/transactions")
    public ResponseEntity<?> getAllTransactions(Pageable pageable) {
        PagedResponse<TransactionDetailResponse> response = transactionService.getAllTransactions(pageable);
        return ResponseUtil.response(
                HttpStatus.OK,
                "All transactions retrieved successfully",
                response);
    }

    @PostMapping("/pickup-points")
    public ResponseEntity<?> createPickupPoint(@RequestBody PickupPointRequest request) {
        PickupPointResponse response = pickupPointService.createPickupPoint(request);
        return ResponseUtil.response(
                HttpStatus.CREATED,
                "Pickup point created successfully",
                response);
    }

    @PutMapping("/pickup-points/{pointId}")
    public ResponseEntity<?> updatePickupPoint(@PathVariable String pointId, @RequestBody PickupPointRequest request) {
        PickupPointResponse response = pickupPointService.updatePickupPoint(pointId, request);
        return ResponseUtil.response(
                HttpStatus.OK,
                "Pickup point updated successfully",
                response);
    }

    @DeleteMapping("/pickup-points/{pointId}")
    public ResponseEntity<?> deletePickupPoint(@PathVariable String pointId) {
        pickupPointService.deletePickupPoint(pointId);
        return ResponseUtil.response(
                HttpStatus.OK,
                "Pickup point deleted successfully",
                null);
    }

    @GetMapping("/payouts")
    public ResponseEntity<?> getAllPayouts() {
        List<PayoutResponse> response = payoutService.getAllPayouts();
        return ResponseUtil.response(
                HttpStatus.OK,
                "All payout requests retrieved",
                response);
    }

    @PostMapping("/payouts/{payoutId}/process")
    public ResponseEntity<?> processPayout(@PathVariable String payoutId, @RequestBody ProcessPayoutRequest request) {
        payoutService.processPayout(payoutId, request);
        return ResponseUtil.response(
                HttpStatus.OK,
                "Payout processed successfully",
                null);
    }

    @GetMapping("/dashboard/summary")
    public ResponseEntity<?> getDashboardSummary() {
        DashboardSummaryResponse response = adminDashboardService.getDashboardSummary();
        return ResponseUtil.response(
                HttpStatus.OK,
                "Dashboard summary retrieved successfully",
                response);
    }
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/controller/AuthController.java
---

package com.doaibu.rebikeapi.controller;

import com.doaibu.rebikeapi.constant.Endpoint;
import com.doaibu.rebikeapi.dto.request.*;
import com.doaibu.rebikeapi.dto.response.LoginResponse;
import com.doaibu.rebikeapi.dto.response.RegisterResponse;
import com.doaibu.rebikeapi.service.UserService;
import com.doaibu.rebikeapi.util.ResponseUtil;
import com.doaibu.rebikeapi.dto.request.VerifyOtpRequest;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(Endpoint.AUTH)
@RequiredArgsConstructor
public class AuthController {

    private final UserService userService;

    @PostMapping("/register/customer")
    public ResponseEntity<?> registerCustomer(@Valid @RequestBody RegisterCustomerRequest request) {
        RegisterResponse response = userService.registerCustomer(request);
        return ResponseUtil.response(
                HttpStatus.CREATED,
                "User registered as a Customer successfully",
                response);
    }

    @PostMapping("/register/partner")
    public ResponseEntity<?> registerPartner(@Valid @RequestBody RegisterPartnerRequest request) {
        RegisterResponse response = userService.registerPartner(request);
        return ResponseUtil.response(
                HttpStatus.CREATED,
                "User registered as a Partner successfully",
                response);
    }

    @PostMapping("/login")
    public ResponseEntity<?> login(@Valid @RequestBody LoginRequest request) {
        LoginResponse response = userService.login(request);
        return ResponseUtil.response(
                HttpStatus.OK,
                "Login successfully",
                response);
    }

    @PostMapping("/forgot-password")
    public ResponseEntity<?> forgotPassword(@Valid @RequestBody ForgotPasswordRequest request,
            HttpServletRequest servletRequest) {
        String feBaseUrl = servletRequest.getHeader("Origin");
        if (feBaseUrl == null) {
            feBaseUrl = "http://localhost:5173";
        }
        userService.processForgotPassword(request.getEmail(), feBaseUrl);
        return ResponseUtil.response(
                HttpStatus.OK,
                "Link reset password telah dikirim ke email Anda",
                null);
    }

    @PostMapping("/reset-password-with-otp")
    public ResponseEntity<?> resetPasswordWithOtp(@Valid @RequestBody ResetPasswordWithOtpRequest request) {
        userService.resetPasswordWithOtp(request);
        return ResponseUtil.response(HttpStatus.OK, "Password berhasil direset", null);
    }

    @PostMapping("/verify-email")
    public ResponseEntity<?> verifyEmail(@Valid @RequestBody VerifyOtpRequest request) {
        userService.verifyEmailOtp(request.getEmail(), request.getOtp());
        return ResponseUtil.response(
                HttpStatus.OK,
                "Email berhasil diverifikasi.",
                null);
    }

    @PostMapping("/resend-otp")
    public ResponseEntity<?> resendOtp(@Valid @RequestBody ResendOtpRequest request) {
        userService.resendVerificationOtp(request.getEmail());
        return ResponseUtil.response(
                HttpStatus.OK,
                "OTP baru telah dikirim.",
                null);
    }

}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/controller/CustomerController.java
---

package com.doaibu.rebikeapi.controller;

import com.doaibu.rebikeapi.constant.Endpoint;
import com.doaibu.rebikeapi.dto.request.TransactionRequest;
import com.doaibu.rebikeapi.dto.response.MidtransChargeResponse;
import com.doaibu.rebikeapi.dto.response.TransactionDetailResponse;
import com.doaibu.rebikeapi.dto.response.TransactionResponse;
import com.doaibu.rebikeapi.service.TransactionService;
import com.doaibu.rebikeapi.util.ResponseUtil;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;

@RestController
@RequestMapping(Endpoint.CUSTOMER)
@RequiredArgsConstructor
public class CustomerController {

    private final TransactionService transactionService;

    @PostMapping("/transactions")
    public ResponseEntity<?> createBooking(@RequestBody TransactionRequest request) {
        MidtransChargeResponse response = transactionService.createBooking(request);
        return ResponseUtil.response(
                HttpStatus.CREATED,
                "Booking created successfully",
                response);
    }

    @GetMapping("/transactions")
    public ResponseEntity<?> getTransactionHistory() {
        List<TransactionResponse> response = transactionService.getTransactionHistory();
        return ResponseUtil.response(
                HttpStatus.OK,
                "Transaction history retrieved successfully",
                response);
    }

    @GetMapping("/transactions/{transactionId}")
    public ResponseEntity<?> getTransactionDetails(@PathVariable String transactionId) {
        TransactionDetailResponse response = transactionService.getTransactionDetails(transactionId);
        return ResponseUtil.response(
                HttpStatus.OK,
                "Transaction details retrieved successfully",
                response);
    }

    @PostMapping("/transactions/{transactionId}/payment")
    public ResponseEntity<?> uploadPaymentProof(@PathVariable String transactionId,
            @RequestParam("paymentProof") MultipartFile paymentProof) {
        String paymentProofUrl = "http://example.com/payment_proofs/" + transactionId + "_"
                + paymentProof.getOriginalFilename();
        transactionService.uploadPaymentProof(transactionId, paymentProofUrl);
        return ResponseUtil.response(
                HttpStatus.OK,
                "Payment proof uploaded successfully",
                null);
    }
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/controller/PartnerController.java
---

package com.doaibu.rebikeapi.controller;

import com.doaibu.rebikeapi.constant.Endpoint;
import com.doaibu.rebikeapi.dto.request.*;
import com.doaibu.rebikeapi.dto.response.*;
import com.doaibu.rebikeapi.service.BikeService;
import com.doaibu.rebikeapi.service.PartnerService;
import com.doaibu.rebikeapi.service.PayoutService;
import com.doaibu.rebikeapi.service.TransactionService;
import com.doaibu.rebikeapi.util.ResponseUtil;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping(Endpoint.PARTNER)
@RequiredArgsConstructor
public class PartnerController {

    private final BikeService bikeService;
    private final PartnerService partnerService;
    private final TransactionService transactionService;
    private final PayoutService payoutService;

    @PutMapping("/profile")
    public ResponseEntity<?> updatePartnerProfile(@RequestBody PartnerDetailUpdateRequest request) {
        partnerService.updatePartnerProfile(request);
        return ResponseUtil.response(
                HttpStatus.OK,
                "Profile updated successfully",
                null);
    }

    @GetMapping("/bank-info")
    public ResponseEntity<?> getBankInformation() {
        PartnerDetailResponse response = partnerService.getBankInformation();
        return ResponseUtil.response(
                HttpStatus.OK,
                "Bank information retrieved successfully",
                response);
    }

    @PutMapping("/bank-info")
    public ResponseEntity<?> updateBankInformation(@RequestBody PartnerUpdateRequest request) {
        partnerService.updateBankInformation(request);
        return ResponseUtil.response(
                HttpStatus.OK,
                "Bank information updated successfully",
                null);
    }

    @PostMapping("/bikes")
    public ResponseEntity<?> addBike(@RequestBody BikeRequest bikeRequest) {
        BikeResponse response = bikeService.addBike(bikeRequest);
        return ResponseUtil.response(
                HttpStatus.CREATED,
                "Bike added successfully",
                response);
    }

    @GetMapping("/bikes")
    public ResponseEntity<?> getAllBikes() {
        List<BikeResponse> response = bikeService.getAllBikes();
        return ResponseUtil.response(
                HttpStatus.OK,
                "All bikes retrieved successfully",
                response);
    }

    @GetMapping("/bikes/{bikeId}")
    public ResponseEntity<?> getBikeById(@PathVariable String bikeId) {
        BikeDetailResponse response = bikeService.getBikeById(bikeId);
        return ResponseUtil.response(
                HttpStatus.OK,
                "Bike retrieved successfully",
                response);
    }

    @PutMapping("/bikes/{bikeId}")
    public ResponseEntity<?> updateBike(@PathVariable String bikeId, @RequestBody BikeRequest bikeRequest) {
        BikeResponse bikeResponse = bikeService.updateBike(bikeId, bikeRequest);
        return ResponseUtil.response(
                HttpStatus.OK,
                "Bike updated successfully",
                bikeResponse);
    }

    @DeleteMapping("/bikes/{bikeId}")
    public ResponseEntity<?> deleteBike(@PathVariable String bikeId) {
        bikeService.deleteBike(bikeId);

        return ResponseUtil.response(
                HttpStatus.OK,
                "Bike deleted successfully",
                null);
    }

    @PostMapping("/transactions/{transactionId}/confirm")
    public ResponseEntity<?> confirmTransaction(@PathVariable String transactionId,
            @RequestBody ConfirmTransactionRequest request) {
        transactionService.confirmTransaction(transactionId, request.getStatus());
        return ResponseUtil.response(
                HttpStatus.OK,
                "Transaction status updated successfully",
                null);
    }

    @GetMapping("/transactions")
    public ResponseEntity<?> getTransactions() {
        List<TransactionDetailResponse> response = transactionService.getTransactionsForPartner();
        return ResponseUtil.response(
                HttpStatus.OK,
                "Partner transactions retrieved successfully",
                response);
    }

    @GetMapping("/financial-summary")
    public ResponseEntity<?> getFinancialSummary() {
        FinancialSummaryResponse response = transactionService.getFinancialSummaryForPartner();
        return ResponseUtil.response(
                HttpStatus.OK,
                "Financial summary retrieved successfully",
                response);
    }

    @PutMapping("/bikes/{bikeId}/status")
    public ResponseEntity<?> updateBikeStatus(@PathVariable String bikeId,
            @RequestBody UpdateBikeStatusRequest request) {
        BikeResponse response = bikeService.updateBikeStatus(bikeId, request.getStatus());
        return ResponseUtil.response(
                HttpStatus.OK,
                "Bike status updated successfully",
                response);
    }

    @GetMapping("/payouts")
    public ResponseEntity<?> getPayoutHistory() {
        List<PayoutResponse> response = payoutService.getPayoutsForPartner();
        return ResponseUtil.response(
                HttpStatus.OK,
                "Payout history retrieved",
                response);
    }

    @PostMapping("/payouts")
    public ResponseEntity<?> requestPayout(@RequestBody PayoutRequest request) {
        PayoutResponse response = payoutService.requestPayout(request);
        return ResponseUtil.response(
                HttpStatus.CREATED,
                "Payout request submitted",
                response);
    }

    @GetMapping("/dashboard/revenue-trend")
    public ResponseEntity<?> getRevenueTrend() {
        RevenueTrendResponse response = transactionService.getRevenueTrendForPartner();
        return ResponseUtil.response(
                HttpStatus.OK,
                "Revenue trend retrieved successfully",
                response
        );
    }
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/controller/PublicController.java
---

package com.doaibu.rebikeapi.controller;

import com.doaibu.rebikeapi.constant.Endpoint;
import com.doaibu.rebikeapi.dto.response.BikeDetailResponse;
import com.doaibu.rebikeapi.dto.response.BikeResponse;
import com.doaibu.rebikeapi.dto.response.PickupPointResponse;
import com.doaibu.rebikeapi.service.BikeService;
import com.doaibu.rebikeapi.service.PickupPointService;
import com.doaibu.rebikeapi.util.ResponseUtil;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequestMapping(Endpoint.PUBLIC)
@RequiredArgsConstructor
public class PublicController {

    private final PickupPointService pickupPointService;
    private final BikeService bikeService;

    @GetMapping("/pickup-points")
    public ResponseEntity<?> getAllPickupPoints() {
        List<PickupPointResponse> response = pickupPointService.getAllPickupPoints();
        return ResponseUtil.response(
                HttpStatus.OK,
                "All pickup points retrieved successfully",
                response);
    }

    @GetMapping("/bikes")
    public ResponseEntity<?> getAllBikes() {
        List<BikeResponse> response = bikeService.getAllBikes();
        return ResponseUtil.response(
                HttpStatus.OK,
                "All bikes retrieved successfully",
                response);
    }

    @GetMapping("/bike/{bikeId}")
    public ResponseEntity<?> getBikeById(@PathVariable String bikeId) {
        BikeDetailResponse response = bikeService.getBikeById(bikeId);
        return ResponseUtil.response(
                HttpStatus.OK,
                "Bike retrieved successfully",
                response);
    }

}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/controller/UserController.java
---

package com.doaibu.rebikeapi.controller;

import com.doaibu.rebikeapi.constant.Endpoint;
import com.doaibu.rebikeapi.dto.request.ChangePasswordRequest;
import com.doaibu.rebikeapi.service.UserService;
import com.doaibu.rebikeapi.util.ResponseUtil;
import com.doaibu.rebikeapi.util.TokenHolder;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(Endpoint.USER)
@RequiredArgsConstructor
public class UserController {

    private final UserService userService;
    private final TokenHolder tokenHolder;

    @PostMapping("/change-password")
    public ResponseEntity<?> changePassword(@Valid @RequestBody ChangePasswordRequest request) {
        String username = tokenHolder.getUsername();
        userService.changePassword(username, request);
        return ResponseUtil.response(
                HttpStatus.OK,
                "Password changed successfully",
                null);
    }
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/request/BikeRequest.java
---

package com.doaibu.rebikeapi.dto.request;

import lombok.Getter;

import java.math.BigDecimal;

@Getter
public class BikeRequest {
    private String name;
    private String photoURL;
    private String plateNumber;
    private String brand;
    private int year;
    private String machineCapacity;
    private String transmissionType;
    private BigDecimal weekdayPricePerDay;
    private BigDecimal weekendPricePerDay;
    private int stock;
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/request/ChangePasswordRequest.java
---

package com.doaibu.rebikeapi.dto.request;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class ChangePasswordRequest {
    private String oldPassword;
    private String newPassword;
    private String confirmPassword;
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/request/ConfirmTransactionRequest.java
---

package com.doaibu.rebikeapi.dto.request;

import com.doaibu.rebikeapi.constant.BookingStatus;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class ConfirmTransactionRequest {
    private BookingStatus status;
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/request/CreatePaymentRequest.java
---

package com.doaibu.rebikeapi.dto.request;

import lombok.Builder;
import lombok.Data;

import java.math.BigDecimal;

@Data
@Builder
public class CreatePaymentRequest {
    private String orderId;
    private BigDecimal grossAmount;
    private String customerName;
    private String customerEmail;
    private String bank;
}




---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/request/ForgotPasswordRequest.java
---

package com.doaibu.rebikeapi.dto.request;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.Getter;

@Getter
public class ForgotPasswordRequest {
    @NotBlank
    @Email
    private String email;
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/request/LoginRequest.java
---

package com.doaibu.rebikeapi.dto.request;

import lombok.Getter;

@Getter
public class LoginRequest {
    private String email;
    private String password;
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/request/PartnerDetailUpdateRequest.java
---

package com.doaibu.rebikeapi.dto.request;

import lombok.Getter;

@Getter
public class PartnerDetailUpdateRequest {
    private String locationName;
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/request/PartnerUpdateRequest.java
---

package com.doaibu.rebikeapi.dto.request;

import lombok.Getter;

@Getter
public class PartnerUpdateRequest {
    private String bankName;
    private String bankAccountName;
    private String bankAccountNumber;
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/request/PayoutRequest.java
---

package com.doaibu.rebikeapi.dto.request;

import lombok.Getter;
import lombok.Setter;

import java.math.BigDecimal;

@Getter
@Setter
public class PayoutRequest {
    private BigDecimal amount;
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/request/PickupPointRequest.java
---

package com.doaibu.rebikeapi.dto.request;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class PickupPointRequest {
    private String locationName;
    private String address;
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/request/ProcessPayoutRequest.java
---

package com.doaibu.rebikeapi.dto.request;

import com.doaibu.rebikeapi.constant.PayoutStatus;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class ProcessPayoutRequest {
    private PayoutStatus status;
    private String notes;
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/request/RegisterCustomerRequest.java
---

package com.doaibu.rebikeapi.dto.request;

import lombok.Getter;

@Getter
public class RegisterCustomerRequest {
    private String firstName;
    private String lastName;
    private String username;
    private String email;
    private String password;
    private String phoneNumber;
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/request/RegisterPartnerRequest.java
---

package com.doaibu.rebikeapi.dto.request;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.Getter;

@Getter
public class RegisterPartnerRequest {

    private String firstName;
    private String lastName;

    @NotBlank(message = "Username tidak boleh kosong")
    private String username;

    @NotBlank(message = "Email tidak boleh kosong")
    @Email(message = "Format email tidak valid")
    private String email;

    @NotBlank(message = "Password tidak boleh kosong")
    @Size(min = 8, message = "Password minimal 8 karakter")
    private String password;

    @NotBlank(message = "Nomor telepon tidak boleh kosong")
    private String phoneNumber;

    private String locationName;
    private String bankAccountName;
    private String bankAccountNumber;
    private String bankName;
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/request/ResendOtpRequest.java
---

package com.doaibu.rebikeapi.dto.request;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.Getter;

@Getter
public class ResendOtpRequest {
    @NotBlank
    @Email
    private String email;
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/request/ResetPasswordRequest.java
---

package com.doaibu.rebikeapi.dto.request;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.Getter;

@Getter
public class ResetPasswordRequest {
    @NotBlank
    private String token;

    @NotBlank
    @Size(min = 8, message = "Password minimal 8 karakter")
    private String newPassword;
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/request/ResetPasswordWithOtpRequest.java
---

package com.doaibu.rebikeapi.dto.request;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.Getter;

@Getter
public class ResetPasswordWithOtpRequest {
    @NotBlank
    @Email
    private String email;

    @NotBlank
    private String otp;

    @NotBlank
    @Size(min = 8, message = "Password minimal 8 karakter")
    private String newPassword;
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/request/TransactionRequest.java
---

package com.doaibu.rebikeapi.dto.request;

import lombok.Getter;

import java.time.LocalDate;

@Getter
public class TransactionRequest {
    private String bikeID;
    private LocalDate startDate;
    private LocalDate endDate;
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/request/UpdateBikeStatusRequest.java
---

package com.doaibu.rebikeapi.dto.request;

import com.doaibu.rebikeapi.constant.BikeStatus;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class UpdateBikeStatusRequest {
    private BikeStatus status;
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/request/VerifyOtpRequest.java
---

package com.doaibu.rebikeapi.dto.request;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.Getter;

@Getter
public class VerifyOtpRequest {
    @NotBlank
    @Email
    private String email;

    @NotBlank
    private String otp;
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/request/VerifyPartnerRequest.java
---

package com.doaibu.rebikeapi.dto.request;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class VerifyPartnerRequest {
    private boolean isVerified;
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/request/VerifyPaymentRequest.java
---

package com.doaibu.rebikeapi.dto.request;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class VerifyPaymentRequest {
    private boolean isValid;
    private String reason;
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/response/other/CommonResponse.java
---

package com.doaibu.rebikeapi.dto.response.other;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class CommonResponse<T> {
    private String message;
    private int statusCode;
    private T data;
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/response/other/PagedResponse.java
---

package com.doaibu.rebikeapi.dto.response.other;

import lombok.Builder;
import lombok.Data;
import java.util.List;

@Data
@Builder
public class PagedResponse<T> {
    private List<T> data;
    private int page;
    private int size;
    private long totalElements;
    private int totalPages;
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/response/AdminPartnerResponse.java
---

package com.doaibu.rebikeapi.dto.response;

import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class AdminPartnerResponse {
    private String id;
    private String name;
    private String email;
    private String locationName;
    private int totalBikes;
    private boolean isVerified;
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/response/BikeDetailResponse.java
---

package com.doaibu.rebikeapi.dto.response;

import com.doaibu.rebikeapi.constant.BikeStatus;
import lombok.Builder;
import lombok.Data;

import java.math.BigDecimal;
import java.util.Set;

@Data
@Builder
public class BikeDetailResponse {
    private String bikeID;
    private String name;
    private String photoURL;
    private String brand;
    private String plateNumber;
    private int year;
    private String transmissionType;
    private String machineCapacity;
    private BigDecimal weekdayPricePerDay;
    private BigDecimal weekendPricePerDay;
    private BikeStatus status;
    private Set<UsagePolicyResponse> usagePolicies;

    @Data
    @Builder
    public static class UsagePolicyResponse {
        private String policyID;
        private String policyName;
        private String description;
        private boolean isPermitted;
    }
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/response/BikeResponse.java
---

package com.doaibu.rebikeapi.dto.response;

import lombok.Builder;
import lombok.Data;

import java.math.BigDecimal;

@Data
@Builder
public class BikeResponse {
    private String bikeID;
    private String name;
    private String photoURL;
    private String brand;
    private BigDecimal weekdayPricePerDay;
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/response/DashboardSummaryResponse.java
---

package com.doaibu.rebikeapi.dto.response;

import lombok.Builder;
import lombok.Data;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

@Data
@Builder
public class DashboardSummaryResponse {
    private long totalUsers;
    private long totalPartners;
    private long totalTransactions;
    private BigDecimal platformRevenue;
    private ChartData userGrowth;
    private ChartData partnerGrowth;

    @Data
    @Builder
    public static class ChartData {
        private List<String> labels;
        private List<Long> data;
    }
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/response/FinancialSummaryResponse.java
---

package com.doaibu.rebikeapi.dto.response;

import lombok.Builder;
import lombok.Data;

import java.math.BigDecimal;

@Data
@Builder
public class FinancialSummaryResponse {
    private BigDecimal totalRevenue;
    private Integer totalCompletedTransactions;
    private Integer totalPendingTransactions;
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/response/LoginResponse.java
---

package com.doaibu.rebikeapi.dto.response;

import com.doaibu.rebikeapi.constant.UserRole;
import lombok.Builder;
import lombok.Data;

import java.util.Set;

@Data
@Builder
public class LoginResponse {
    private Set<UserRole> roles;
    private String token;
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/response/MidtransChargeResponse.java
---

package com.doaibu.rebikeapi.dto.response;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

@Data
public class MidtransChargeResponse {
    @JsonProperty("transaction_id")
    private String transactionId;

    @JsonProperty("order_id")
    private String orderId;

    @JsonProperty("payment_type")
    private String paymentType;

    @JsonProperty("transaction_status")
    private String transactionStatus;

    @JsonProperty("va_numbers")
    private Object vaNumbers;

    @JsonProperty("redirect_url")
    private String redirectUrl;
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/response/PartnerDetailResponse.java
---

package com.doaibu.rebikeapi.dto.response;

import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class PartnerDetailResponse {
    private String bankName;
    private String bankAccountName;
    private String bankAccountNumber;
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/response/PayoutResponse.java
---

package com.doaibu.rebikeapi.dto.response;

import com.doaibu.rebikeapi.constant.PayoutStatus;
import lombok.Builder;
import lombok.Data;

import java.math.BigDecimal;
import java.time.LocalDateTime;

@Data
@Builder
public class PayoutResponse {
    private String id;
    private String partnerName;
    private BigDecimal amount;
    private PayoutStatus status;
    private LocalDateTime requestedAt;
    private LocalDateTime processedAt;
    private String bankDetailsSnapshot;
    private String notes;
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/response/PickupPointResponse.java
---

package com.doaibu.rebikeapi.dto.response;

import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class PickupPointResponse {
    private String pickupPointID;
    private String locationName;
    private String address;
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/response/RegisterResponse.java
---

package com.doaibu.rebikeapi.dto.response;

import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class RegisterResponse {
    private String userID;
    private String email;
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/response/RevenueTrendResponse.java
---

package com.doaibu.rebikeapi.dto.response;

import lombok.Builder;
import lombok.Data;

import java.math.BigDecimal;
import java.util.List;

@Data
@Builder
public class RevenueTrendResponse {
    private List<String> labels;
    private List<BigDecimal> data;
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/response/TransactionDetailResponse.java
---

package com.doaibu.rebikeapi.dto.response;

import com.doaibu.rebikeapi.constant.BookingStatus;
import com.doaibu.rebikeapi.constant.PaymentStatus;

import lombok.Builder;
import lombok.Data;

import java.math.BigDecimal;
import java.time.LocalDate;

@Data
@Builder
public class TransactionDetailResponse {
    private String transactionID;
    private LocalDate startDate;
    private LocalDate endDate;
    private BigDecimal baseCost;
    private BigDecimal totalCost;
    private PaymentStatus paymentStatus;
    private BookingStatus bookingStatus;
    private BikeResponse bike;
    private UserResponse customer;
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/response/TransactionResponse.java
---

package com.doaibu.rebikeapi.dto.response;

import com.doaibu.rebikeapi.constant.BookingStatus;
import com.doaibu.rebikeapi.constant.PaymentStatus;

import lombok.Builder;
import lombok.Data;

import java.math.BigDecimal;
import java.time.LocalDate;

@Data
@Builder
public class TransactionResponse {
    private String transactionID;
    private LocalDate startDate;
    private LocalDate endDate;
    private BigDecimal baseCost;
    private BigDecimal totalCost;
    private PaymentStatus paymentStatus;
    private BookingStatus bookingStatus;

    @Data
    @Builder
    public static class AdditionalFeeResponse {
        private String feeID;
        private String description;
        private BigDecimal amount;
    }
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/dto/response/UserResponse.java
---

package com.doaibu.rebikeapi.dto.response;

import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class UserResponse {
    private String userID;
    private String firstName;
    private String lastName;
    private String email;
    private String phoneNumber;
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/entity/Bike.java
---

package com.doaibu.rebikeapi.entity;

import com.doaibu.rebikeapi.constant.BikeStatus;
import jakarta.persistence.*;
import lombok.*;
import java.math.BigDecimal;
import java.util.Set;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
@Entity
@Table(name = "mst_bike")
public class Bike {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private String id;

    @Column(nullable = false)
    private String name;

    @Column(name = "photo_url", nullable = false)
    private String photoURL;

    @Column(nullable = false)
    private String brand;

    @Column(name = "plate_number", nullable = false, unique = true)
    private String plateNumber;

    @Column(nullable = false)
    private int year;

    @Column(name = "machine_capacity", nullable = false)
    private String machineCapacity;

    @Column(name = "transmission_type", nullable = false)
    private String transmissionType;

    @Column(name = "weekday_price_per_day", nullable = false)
    private BigDecimal weekdayPricePerDay;

    @Column(name = "weekend_price_per_day", nullable = false)
    private BigDecimal weekendPricePerDay;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private BikeStatus status;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "partner_id", nullable = false)
    private User partner;

    @OneToMany(mappedBy = "bike", cascade = CascadeType.ALL)
    private Set<Transaction> transactions;

    @ManyToMany
    @JoinTable(
            name = "trx_bike_usage_policy",
            joinColumns = @JoinColumn(name = "bike_id"),
            inverseJoinColumns = @JoinColumn(name = "usage_policy_id")
    )
    private Set<UsagePolicy> usagePolicies;

    @Version
    private Long version;
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/entity/Partner.java
---

package com.doaibu.rebikeapi.entity;

import jakarta.persistence.*;
import lombok.*;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
@Entity
@Table(name = "mst_partner")
public class Partner {
    @Id
    private String id;

    @OneToOne
    @MapsId
    @JoinColumn(name = "id")
    private User user;

    @Column(name = "location_name", nullable = true)
    private String locationName;

    @Column(name = "bank_name", nullable = true)
    private String bankName;

    @Column(name = "bank_account_name", nullable = true)
    private String bankAccountName;

    @Column(name = "bank_account_number", nullable = true)
    private String bankAccountNumber;

    @Column(name = "is_verified", nullable = false)
    private boolean isVerified;
}




---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/entity/Payment.java
---

package com.doaibu.rebikeapi.entity;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import com.doaibu.rebikeapi.constant.PaymentStatus;

import jakarta.persistence.*;
import lombok.*;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
@Entity
@Table(name = "trx_payment")
public class Payment {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private String id;

    @Column(nullable = false)
    private String orderId;

    @Column(name = "transaction_id", nullable = false)
    private String transactionId;

    @Column(name = "payment_type", nullable = false)
    private String paymentType;
    
    @Column(nullable = false)
    private String status;

    @Column(nullable = false)
    private BigDecimal amount;

    @Column(name = "created_at", nullable = false)
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @OneToOne
    @JoinColumn(name = "transaction_id_ref", nullable = false)
    private Transaction transaction;
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/entity/Payout.java
---

package com.doaibu.rebikeapi.entity;

import com.doaibu.rebikeapi.constant.PayoutStatus;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;
import java.time.LocalDateTime;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
@Entity
@Table(name = "trx_payout")
public class Payout {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private String id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "partner_id", nullable = false)
    private User partner;

    @Column(nullable = false)
    private BigDecimal amount;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private PayoutStatus status;

    @Column(name = "requested_at", nullable = false)
    private LocalDateTime requestedAt;

    @Column(name = "processed_at")
    private LocalDateTime processedAt;

    @Column(name = "bank_details_snapshot", columnDefinition = "TEXT")
    private String bankDetailsSnapshot;

    @Column
    private String notes;
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/entity/PickupPoint.java
---

package com.doaibu.rebikeapi.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Entity
@Table(name = "mst_pickup_point")
public class PickupPoint {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private String id;

    @Column(name = "location_name", nullable = false)
    private String locationName;

    @Column(columnDefinition = "TEXT", nullable = false)
    private String address;
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/entity/Role.java
---

package com.doaibu.rebikeapi.entity;

import com.doaibu.rebikeapi.constant.UserRole;
import jakarta.persistence.*;
import lombok.*;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Entity
@Table(name = "mst_role")
public class Role {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private String id;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private UserRole name;
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/entity/Transaction.java
---

package com.doaibu.rebikeapi.entity;

import com.doaibu.rebikeapi.constant.BookingStatus;
import com.doaibu.rebikeapi.constant.PaymentStatus;
import jakarta.persistence.*;
import lombok.*;

import java.math.BigDecimal;
import java.time.LocalDate;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
@Entity
@Table(name = "trx_transaction")
public class Transaction {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private String id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "bike_id", nullable = false)
    private Bike bike;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "customer_id", nullable = false)
    private User customer;

    @Column(name = "start_date", nullable = false)
    private LocalDate startDate;

    @Column(name = "end_date", nullable = false)
    private LocalDate endDate;

    @Column(name = "base_cost", nullable = false)
    private BigDecimal baseCost;

    @Column(name = "additional_costs", nullable = false)
    private BigDecimal additionalCosts;

    @Column(name = "total_cost", nullable = false)
    private BigDecimal totalCost;

    @Enumerated(EnumType.STRING)
    @Column(name = "booking_status", nullable = false)
    private BookingStatus bookingStatus;

    @Enumerated(EnumType.STRING)
    @Column(name = "payment_status", nullable = false)
    private PaymentStatus paymentStatus;

    @Column(name = "payment_proof_url", nullable = true)
    private String paymentProofUrl;
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/entity/UsagePolicy.java
---

package com.doaibu.rebikeapi.entity;

import jakarta.persistence.*;
import lombok.*;

import java.util.Set;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
@Entity
@Table(name = "mst_usage_policy")
public class UsagePolicy {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private String id;

    @Column(name = "policy_name", nullable = false)
    private String policyName;

    @Column(columnDefinition = "TEXT")
    private String description;

    @Column(name = "is_permitted", nullable = false)
    private boolean isPermitted;

    @ManyToMany(mappedBy = "usagePolicies")
    private Set<Bike> bikes;
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/entity/User.java
---

package com.doaibu.rebikeapi.entity;

import jakarta.persistence.*;
import lombok.*;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.Set;
import java.util.stream.Collectors;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
@Entity
@Table(name = "mst_user")
public class User implements UserDetails {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private String id;

    @Column(name = "first_name", nullable = false)
    private String firstName;

    @Column(name = "last_name")
    private String lastName;

    @Column(nullable = false, unique = true)
    private String username;

    @Column(nullable = false, unique = true)
    private String email;

    @Column(nullable = false)
    private String password;

    @Column(name = "phone_number", nullable = false)
    private String phoneNumber;

    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @Column(name = "created_by")
    private String createdBy;

    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @Column(name = "updated_by")
    private String updatedBy;

    @Column(name = "is_account_non_expired")
    private boolean isAccountNonExpired;

    @Column(name = "is_account_non_locked")
    private boolean isAccountNonLocked;

    @Column(name = "is_credentials_non_expired")
    private boolean isCredentialsNonExpired;

    @Column(name = "is_enabled")
    private boolean isEnabled = false;

    @Column(name = "is_email_verified")
    private boolean isEmailVerified = false;

    @Column(name = "verification_otp")
    private String verificationOtp;

    @Column(name = "otp_expiry_time")
    private LocalDateTime otpExpiryTime;

    @Column(name = "reset_password_token")
    private String resetPasswordToken;

    @Column(name = "reset_password_token_expiry")
    private LocalDateTime resetPasswordTokenExpiry;

    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(name = "trx_user_role", joinColumns = @JoinColumn(name = "user_id"), inverseJoinColumns = @JoinColumn(name = "role_id"))
    private Set<Role> roles;

    @OneToMany(mappedBy = "customer", cascade = CascadeType.ALL)
    private Set<Transaction> transactions;

    @OneToMany(mappedBy = "partner", cascade = CascadeType.ALL)
    private Set<Bike> ownedBikes;

    @OneToOne(mappedBy = "user", cascade = CascadeType.ALL)
    private Partner partnerDetail;

    @Version
    private Long version;

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return roles.stream()
                .map(role -> new SimpleGrantedAuthority("ROLE_" + role.getName().name()))
                .collect(Collectors.toList());
    }

    @Override
    public String getUsername() { return username; }

    @Override
    public String getPassword() { return password; }

    @Override
    public boolean isAccountNonExpired() { return isAccountNonExpired; }

    @Override
    public boolean isAccountNonLocked() { return isAccountNonLocked; }

    @Override
    public boolean isCredentialsNonExpired() { return isCredentialsNonExpired; }

    @Override
    public boolean isEnabled() { return isEnabled; }
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/exception/CustomException.java
---

package com.doaibu.rebikeapi.exception;

public class CustomException {

    public static class BadRequestException extends RuntimeException {
        public BadRequestException(String message) {
            super(message);
        }
    }

    public static class AuthenticationException extends RuntimeException {
        public AuthenticationException(String message) {
            super(message);
        }
    }

    public static class AuthorizationException extends RuntimeException {
        public AuthorizationException(String message) {
            super(message);
        }
    }

    public static class ResourceNotFoundException extends RuntimeException {
        public ResourceNotFoundException(String message) {
            super(message);
        }
    }

    public static class ConflictException extends RuntimeException {
        public ConflictException(String message) {
            super(message);
        }
    }

    public static class PaymentException extends RuntimeException {
        public PaymentException(String message) {
            super(message);
        }
    }
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/exception/GlobalExceptionHandler.java
---

package com.doaibu.rebikeapi.exception;

import com.doaibu.rebikeapi.dto.response.other.CommonResponse;
import com.doaibu.rebikeapi.util.ResponseUtil;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

@RestControllerAdvice
public class GlobalExceptionHandler {
    @ExceptionHandler(CustomException.BadRequestException.class)
    public ResponseEntity<?> handleBadRequest(CustomException.BadRequestException ex) {
        return ResponseUtil.response(
                HttpStatus.BAD_REQUEST,
                ex.getMessage(),
                null);
    }

    @ExceptionHandler(CustomException.AuthenticationException.class)
    public ResponseEntity<?> handleAuthentication(CustomException.AuthenticationException ex) {
        return ResponseUtil.response(
                HttpStatus.UNAUTHORIZED,
                ex.getMessage(),
                null);
    }

    @ExceptionHandler(CustomException.AuthorizationException.class)
    public ResponseEntity<?> handleAuthorization(CustomException.AuthorizationException ex) {
        return ResponseUtil.response(
                HttpStatus.FORBIDDEN,
                ex.getMessage(),
                null);
    }

    @ExceptionHandler(CustomException.ResourceNotFoundException.class)
    public ResponseEntity<?> handleNotFound(CustomException.ResourceNotFoundException ex) {
        return ResponseUtil.response(
                HttpStatus.NOT_FOUND,
                ex.getMessage(),
                null);
    }

    @ExceptionHandler(CustomException.ConflictException.class)
    public ResponseEntity<?> handleConflict(CustomException.ConflictException ex) {
        return ResponseUtil.response(
                HttpStatus.CONFLICT,
                ex.getMessage(),
                null);
    }

    @ExceptionHandler(CustomException.PaymentException.class)
    public ResponseEntity<?> handlePayment(CustomException.PaymentException ex) {
        return ResponseUtil.response(
                HttpStatus.PAYMENT_REQUIRED,
                ex.getMessage(),
                null);
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<?> handleAll(Exception ex) {
        ex.printStackTrace();
        return ResponseUtil.response(
                HttpStatus.INTERNAL_SERVER_ERROR,
                ex.getMessage(),
                null);
    }
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/repository/BikeRepository.java
---

package com.doaibu.rebikeapi.repository;

import com.doaibu.rebikeapi.entity.Bike;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface BikeRepository extends JpaRepository<Bike, String> {

}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/repository/PartnerRepository.java
---

package com.doaibu.rebikeapi.repository;

import com.doaibu.rebikeapi.entity.Partner;
import com.doaibu.rebikeapi.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface PartnerRepository extends JpaRepository<Partner, String> {
    Optional<Partner> findByUser(User user);
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/repository/PaymentRepository.java
---

package com.doaibu.rebikeapi.repository;

import com.doaibu.rebikeapi.entity.Payment;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface PaymentRepository extends JpaRepository<Payment, String> {
    Optional<Payment> findByOrderId(String orderId);
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/repository/PayoutRepository.java
---

package com.doaibu.rebikeapi.repository;

import com.doaibu.rebikeapi.entity.Payout;
import com.doaibu.rebikeapi.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface PayoutRepository extends JpaRepository<Payout, String> {
    List<Payout> findByPartnerOrderByRequestedAtDesc(User partner);
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/repository/PickupPointRepository.java
---

package com.doaibu.rebikeapi.repository;

import com.doaibu.rebikeapi.entity.PickupPoint;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface PickupPointRepository extends JpaRepository<PickupPoint, String> {

}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/repository/RoleRepository.java
---

package com.doaibu.rebikeapi.repository;

import com.doaibu.rebikeapi.constant.UserRole;
import com.doaibu.rebikeapi.entity.Role;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface RoleRepository extends JpaRepository<Role, String> {
    Optional<Role> findByName(UserRole name);
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/repository/TransactionRepository.java
---

package com.doaibu.rebikeapi.repository;

import com.doaibu.rebikeapi.constant.BookingStatus;
import com.doaibu.rebikeapi.entity.Transaction;
import com.doaibu.rebikeapi.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.math.BigDecimal;
import java.util.List;

@Repository
public interface TransactionRepository extends JpaRepository<Transaction, String> {
    List<Transaction> findByCustomer(User customer);
    List<Transaction> findByBike_Partner(User partner);

    @Query("SELECT SUM(t.totalCost) FROM Transaction t WHERE t.bookingStatus = :status")
    BigDecimal sumTotalCostByBookingStatus(BookingStatus status);
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/repository/UserRepository.java
---

package com.doaibu.rebikeapi.repository;

import com.doaibu.rebikeapi.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import com.doaibu.rebikeapi.entity.Role;

import java.time.LocalDateTime;
import java.util.Optional;
import java.util.Set;

@Repository
public interface UserRepository extends JpaRepository<User, String> {
    Optional<User> findByUsername(String username);

    User findByEmail(String email);

    Boolean existsByEmail(String email);

    Page<User> findByRolesIn(Set<Role> roles, Pageable pageable);

    Optional<User> findByResetPasswordToken(String token);

    long countByRolesContaining(Role partnerRole);

    @Query("SELECT COUNT(u) FROM User u WHERE u.createdAt BETWEEN :start AND :end")
    long countNewUsersBetween(@Param("start") LocalDateTime start, @Param("end") LocalDateTime end);

    @Query("SELECT COUNT(u) FROM User u WHERE :role MEMBER OF u.roles AND u.createdAt BETWEEN :start AND :end")
    long countNewUsersWithRoleBetween(@Param("role") Role role, @Param("start") LocalDateTime start, @Param("end") LocalDateTime end);
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/security/CustomOAuth2AuthenticationSuccessHandler.java
---

package com.doaibu.rebikeapi.security;

import com.doaibu.rebikeapi.entity.User;
import com.doaibu.rebikeapi.service.UserService;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.core.user.DefaultOAuth2User;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.stereotype.Component;
import org.springframework.web.util.UriComponentsBuilder;

import java.io.IOException;

@Component
@RequiredArgsConstructor
public class CustomOAuth2AuthenticationSuccessHandler implements AuthenticationSuccessHandler {

    private final UserService userService;
    private final JwtUtil jwtUtil;

    @Override
    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {
        DefaultOAuth2User oauth2User = (DefaultOAuth2User) authentication.getPrincipal();
        String email = oauth2User.getAttribute("email");
        String name = oauth2User.getAttribute("name");

        User user = userService.processOAuthPostLogin(email, name);
        String token = jwtUtil.generateToken(user);

        String redirectUrl = UriComponentsBuilder.fromUriString("http://localhost:5173/auth/sso-callback")
                .queryParam("token", token)
                .build().toUriString();

        response.sendRedirect(redirectUrl);
    }
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/security/JwtAuthFilter.java
---

package com.doaibu.rebikeapi.security;

import com.doaibu.rebikeapi.service.impl.UserDetailsServiceImpl;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@RequiredArgsConstructor
@Component
public class JwtAuthFilter extends OncePerRequestFilter {
    private final JwtUtil jwtUtil;
    private final UserDetailsServiceImpl userDetailsService;

    @Override
    protected void doFilterInternal(HttpServletRequest request,
            HttpServletResponse response,
            FilterChain filterChain) throws ServletException, IOException {
        String authHeader = request.getHeader("Authorization");

        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            String token = authHeader.substring(7);
            String username = jwtUtil.extractUsername(token);

            if (jwtUtil.validateToken(token)) {
                UserDetails userDetails = userDetailsService.loadUserByUsername(username);

                UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(
                        username,
                        null,
                        userDetails.getAuthorities());

                SecurityContextHolder.getContext().setAuthentication(auth);
            }
        }

        filterChain.doFilter(request, response);
    }
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/security/JwtUtil.java
---

package com.doaibu.rebikeapi.security;

import com.doaibu.rebikeapi.config.JwtProperties;
import com.auth0.jwt.JWT;
import com.auth0.jwt.JWTVerifier;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.exceptions.JWTVerificationException;
import com.auth0.jwt.interfaces.DecodedJWT;
import com.doaibu.rebikeapi.entity.User; // Import User entity
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.stereotype.Component;

import java.util.Collection;
import java.util.Date;
import java.util.stream.Collectors;

@Component
@RequiredArgsConstructor
public class JwtUtil {

    private final JwtProperties jwtProperties;

    public String generateToken(User user) {
        return JWT.create()
                .withSubject(user.getUsername())
                .withClaim("roles", user.getAuthorities().stream().map(GrantedAuthority::getAuthority).collect(Collectors.toList()))
                .withClaim("firstName", user.getFirstName())
                .withIssuedAt(new Date())
                .withExpiresAt(new Date(System.currentTimeMillis() + jwtProperties.getExpirationMs()))
                .sign(Algorithm.HMAC256(jwtProperties.getSecretKey()));
    }

    public boolean validateToken(String token) {
        try {
            JWTVerifier verifier = JWT.require(Algorithm.HMAC256(jwtProperties.getSecretKey())).build();
            verifier.verify(token);
            return true;
        } catch (JWTVerificationException e) {
            return false;
        }
    }

    public String extractUsername(String token) {
        DecodedJWT jwt = JWT.decode(token);
        return jwt.getSubject();
    }
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/service/impl/AdminDashboardServiceImpl.java
---

package com.doaibu.rebikeapi.service.impl;

import com.doaibu.rebikeapi.constant.BookingStatus;
import com.doaibu.rebikeapi.constant.UserRole;
import com.doaibu.rebikeapi.dto.response.DashboardSummaryResponse;
import com.doaibu.rebikeapi.entity.Role;
import com.doaibu.rebikeapi.repository.RoleRepository;
import com.doaibu.rebikeapi.repository.TransactionRepository;
import com.doaibu.rebikeapi.repository.UserRepository;
import com.doaibu.rebikeapi.service.AdminDashboardService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.time.format.TextStyle;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

@Service
@RequiredArgsConstructor
public class AdminDashboardServiceImpl implements AdminDashboardService {

    private final UserRepository userRepository;
    private final TransactionRepository transactionRepository;
    private final RoleRepository roleRepository;
    private static final BigDecimal PLATFORM_FEE_PERCENTAGE = new BigDecimal("0.10");

    @Override
    public DashboardSummaryResponse getDashboardSummary() {
        Role partnerRole = roleRepository.findByName(UserRole.PARTNER)
                .orElseThrow(() -> new IllegalStateException("Partner role not found in database"));

        long totalUsers = userRepository.count();
        long totalPartners = userRepository.countByRolesContaining(partnerRole);
        long totalTransactions = transactionRepository.count();

        BigDecimal totalRevenue = transactionRepository.sumTotalCostByBookingStatus(BookingStatus.COMPLETED);
        BigDecimal platformRevenue = (totalRevenue != null) ? totalRevenue.multiply(PLATFORM_FEE_PERCENTAGE) : BigDecimal.ZERO;

        LocalDateTime now = LocalDateTime.now();
        List<String> labels = IntStream.range(0, 6)
                .mapToObj(i -> now.minusMonths(i).getMonth())
                .map(month -> month.getDisplayName(TextStyle.SHORT, new Locale("id", "ID")))
                .collect(Collectors.toList());
        java.util.Collections.reverse(labels);

        List<Long> userGrowthData = new ArrayList<>();
        List<Long> partnerGrowthData = new ArrayList<>();

        for (int i = 5; i >= 0; i--) {
            LocalDateTime startOfMonth = now.minusMonths(i).withDayOfMonth(1).withHour(0).withMinute(0).withSecond(0);
            LocalDateTime endOfMonth = startOfMonth.plusMonths(1).minusNanos(1);
            userGrowthData.add(userRepository.countNewUsersBetween(startOfMonth, endOfMonth));
            partnerGrowthData.add(userRepository.countNewUsersWithRoleBetween(partnerRole, startOfMonth, endOfMonth));
        }

        DashboardSummaryResponse.ChartData userGrowth = DashboardSummaryResponse.ChartData.builder()
                .labels(labels)
                .data(userGrowthData)
                .build();
        DashboardSummaryResponse.ChartData partnerGrowth = DashboardSummaryResponse.ChartData.builder()
                .labels(labels)
                .data(partnerGrowthData)
                .build();

        return DashboardSummaryResponse.builder()
                .totalUsers(totalUsers)
                .totalPartners(totalPartners)
                .totalTransactions(totalTransactions)
                .platformRevenue(platformRevenue)
                .userGrowth(userGrowth)
                .partnerGrowth(partnerGrowth)
                .build();
    }
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/service/impl/BikeServiceImpl.java
---

package com.doaibu.rebikeapi.service.impl;

import com.doaibu.rebikeapi.constant.BikeStatus;
import com.doaibu.rebikeapi.dto.request.BikeRequest;
import com.doaibu.rebikeapi.dto.response.BikeDetailResponse;
import com.doaibu.rebikeapi.dto.response.BikeResponse;
import com.doaibu.rebikeapi.entity.Bike;
import com.doaibu.rebikeapi.entity.User;
import com.doaibu.rebikeapi.exception.CustomException;
import com.doaibu.rebikeapi.repository.BikeRepository;
import com.doaibu.rebikeapi.repository.UserRepository;
import com.doaibu.rebikeapi.service.BikeService;
import com.doaibu.rebikeapi.util.TokenHolder;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class BikeServiceImpl implements BikeService {

    private final BikeRepository bikeRepository;
    private final UserRepository userRepository;
    private final TokenHolder tokenHolder;

    @Override
    @Transactional
    public BikeResponse addBike(BikeRequest request) {
        User partner = userRepository.findByUsername(tokenHolder.getUsername())
                .orElseThrow(() -> new CustomException.ResourceNotFoundException("User not found."));

        Bike bike = mapToBike(request);
        bike.setPartner(partner);
        bike.setStatus(BikeStatus.AVAILABLE);
        bikeRepository.save(bike);

        return mapToBikeResponse(bike);
    }

    @Override
    public List<BikeResponse> getAllBikes() {
        return bikeRepository.findAll().stream()
                .map(this::mapToBikeResponse)
                .collect(Collectors.toList());
    }

    @Override
    public BikeDetailResponse getBikeById(String id) {
        Bike bike = bikeRepository.findById(id)
                .orElseThrow(() -> new CustomException.ResourceNotFoundException("Bike not found."));

        return mapToBikeDetailResponse(bike);
    }

    @Override
    @Transactional
    public BikeResponse updateBike(String id, BikeRequest request) {
        Bike bike = bikeRepository.findById(id)
                .orElseThrow(() -> new CustomException.ResourceNotFoundException("Bike not found."));

        bike.setName(request.getName());
        bike.setPhotoURL(request.getPhotoURL());
        bike.setBrand(request.getBrand());
        bike.setPlateNumber(request.getPlateNumber());
        bike.setYear(request.getYear());
        bike.setMachineCapacity(request.getMachineCapacity());
        bike.setTransmissionType(request.getTransmissionType());
        bike.setWeekdayPricePerDay(request.getWeekdayPricePerDay());
        bike.setWeekendPricePerDay(request.getWeekendPricePerDay());
        bikeRepository.save(bike);

        return mapToBikeResponse(bike);
    }

    @Override
    @Transactional
    public void deleteBike(String id) {
        Bike bike = bikeRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Bike not found"));

        bikeRepository.delete(bike);
    }

    private Bike mapToBike(BikeRequest request) {
        return Bike.builder()
                .name(request.getName())
                .photoURL(request.getPhotoURL())
                .brand(request.getBrand())
                .plateNumber(request.getPlateNumber())
                .year(request.getYear())
                .machineCapacity(request.getMachineCapacity())
                .transmissionType(request.getTransmissionType())
                .weekdayPricePerDay(request.getWeekdayPricePerDay())
                .weekendPricePerDay(request.getWeekendPricePerDay())
                .build();
    }

    @Override
    @Transactional
    public BikeResponse updateBikeStatus(String bikeId, BikeStatus status) {
        User partner = userRepository.findByUsername(tokenHolder.getUsername())
                .orElseThrow(() -> new CustomException.ResourceNotFoundException("Partner not found"));

        Bike bike = bikeRepository.findById(bikeId)
                .orElseThrow(() -> new CustomException.ResourceNotFoundException("Bike not found"));

        if (!Objects.equals(bike.getPartner().getId(), partner.getId())) {
            throw new CustomException.AuthorizationException("You are not authorized to modify this bike");
        }

        bike.setStatus(status);
        bikeRepository.save(bike);
        return mapToBikeResponse(bike);
    }

    private BikeResponse mapToBikeResponse(Bike bike) {
        return BikeResponse.builder()
                .bikeID(bike.getId())
                .name(bike.getName())
                .photoURL(bike.getPhotoURL())
                .brand(bike.getBrand())
                .weekdayPricePerDay(bike.getWeekdayPricePerDay())
                .build();
    }

    private BikeDetailResponse mapToBikeDetailResponse(Bike bike) {
        return BikeDetailResponse.builder()
                .bikeID(bike.getId())
                .name(bike.getName())
                .photoURL(bike.getPhotoURL())
                .brand(bike.getBrand())
                .plateNumber(bike.getPlateNumber())
                .year(bike.getYear())
                .transmissionType(bike.getTransmissionType())
                .machineCapacity(bike.getMachineCapacity())
                .weekdayPricePerDay(bike.getWeekdayPricePerDay())
                .weekendPricePerDay(bike.getWeekendPricePerDay())
                .status(bike.getStatus())
                .usagePolicies(
                        bike.getUsagePolicies().stream()
                                .map(policy -> BikeDetailResponse.UsagePolicyResponse.builder()
                                        .policyID(policy.getId())
                                        .policyName(policy.getPolicyName())
                                        .description(policy.getDescription())
                                        .isPermitted(policy.isPermitted())
                                        .build())
                                .collect(Collectors.toSet()))
                .build();
    }
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/service/impl/EmailServiceImpl.java
---

package com.doaibu.rebikeapi.service.impl;

import com.doaibu.rebikeapi.exception.CustomException;
import com.doaibu.rebikeapi.service.EmailService;
import lombok.RequiredArgsConstructor;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class EmailServiceImpl implements EmailService {

    private final JavaMailSender mailSender;

    @Override
    public void sendEmail(String to, String subject, String text) {
        try {
            SimpleMailMessage message = new SimpleMailMessage();
            message.setTo(to);
            message.setSubject(subject);
            message.setText(text);
            mailSender.send(message);
        } catch (Exception e) {
            throw new CustomException.BadRequestException("Failed to send verification email, please try again later.");
        }
    }
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/service/impl/MidtransServiceImpl.java
---

package com.doaibu.rebikeapi.service.impl;

import com.doaibu.rebikeapi.entity.Payment;
import com.doaibu.rebikeapi.repository.PaymentRepository;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.doaibu.rebikeapi.config.MidtransConfig;
import com.doaibu.rebikeapi.dto.request.CreatePaymentRequest;
import com.doaibu.rebikeapi.dto.response.MidtransChargeResponse;
import com.doaibu.rebikeapi.service.MidtransService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.HashMap;
import java.util.Map;
import java.time.LocalDateTime;
import java.util.Base64;

@Service
@RequiredArgsConstructor
public class MidtransServiceImpl implements MidtransService {

    private final PaymentRepository paymentRepository;

    private final MidtransConfig config;
    private final RestTemplate restTemplate;

    public MidtransChargeResponse createTransaction(CreatePaymentRequest request) {
        String base64Key = Base64.getEncoder().encodeToString((config.getServerKey() + ":").getBytes());

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.set("Authorization", "Basic " + base64Key);

        Map<String, Object> payload = new HashMap<>();
        payload.put("payment_type", "bank_transfer");

        Map<String, Object> transactionDetails = Map.of(
                "order_id", request.getOrderId(),
                "gross_amount", request.getGrossAmount()
        );

        Map<String, Object> customerDetails = Map.of(
                "first_name", request.getCustomerName(),
                "email", request.getCustomerEmail()
        );

        Map<String, Object> bankTransfer = Map.of("bank", request.getBank());

        payload.put("transaction_details", transactionDetails);
        payload.put("customer_details", customerDetails);
        payload.put("bank_transfer", bankTransfer);

        HttpEntity<Map<String, Object>> entity = new HttpEntity<>(payload, headers);

        ResponseEntity<MidtransChargeResponse> response = restTemplate.exchange(
                config.getApiUrl(),
                HttpMethod.POST,
                entity,
                MidtransChargeResponse.class
        );

        System.out.println(response.getBody());
        return response.getBody();
    }

    @Override
    public void handleNotification(Map<String, Object> payload) {
        String orderId = (String) payload.get("order_id");
        String transactionStatus = (String) payload.get("transaction_status");

        Payment payment = paymentRepository.findByOrderId(orderId)
                .orElseThrow(() -> new RuntimeException("Order not found"));

        payment.setStatus(transactionStatus);
        payment.setUpdatedAt(LocalDateTime.now());

        paymentRepository.save(payment);
    }
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/service/impl/PartnerServiceImpl.java
---

package com.doaibu.rebikeapi.service.impl;

import com.doaibu.rebikeapi.dto.request.PartnerDetailUpdateRequest;
import com.doaibu.rebikeapi.dto.request.PartnerUpdateRequest;
import com.doaibu.rebikeapi.dto.response.PartnerDetailResponse;
import com.doaibu.rebikeapi.entity.Partner;
import com.doaibu.rebikeapi.entity.User;
import com.doaibu.rebikeapi.exception.CustomException;
import com.doaibu.rebikeapi.repository.PartnerRepository;
import com.doaibu.rebikeapi.repository.UserRepository;
import com.doaibu.rebikeapi.service.PartnerService;
import com.doaibu.rebikeapi.util.TokenHolder;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
@RequiredArgsConstructor
public class PartnerServiceImpl implements PartnerService {

    private final PartnerRepository partnerRepository;
    private final UserRepository userRepository;
    private final TokenHolder tokenHolder;

    @Override
    public void updatePartnerProfile(PartnerDetailUpdateRequest request) {
        String username = tokenHolder.getUsername();
        Optional<User> userOptional = userRepository.findByUsername(username);

        if (userOptional.isPresent()) {
            User user = userOptional.get();
            Optional<Partner> partnerOptional = partnerRepository.findByUser(user);

            if (partnerOptional.isPresent()) {
                Partner partner = partnerOptional.get();

                partner.setLocationName(request.getLocationName());
                partnerRepository.save(partner);
            } else {
                throw new CustomException.ResourceNotFoundException("Partner not found for the authenticated user.");
            }
        } else {
            throw new CustomException.ResourceNotFoundException("User not found.");
        }
    }

    @Override
    public PartnerDetailResponse getBankInformation() {
        String username = tokenHolder.getUsername();
        Optional<User> userOptional = userRepository.findByUsername(username);

        if (userOptional.isPresent()) {
            User user = userOptional.get();
            Optional<Partner> partnerOptional = partnerRepository.findByUser(user);

            if (partnerOptional.isPresent()) {
                Partner partner = partnerOptional.get();

                return PartnerDetailResponse.builder()
                        .bankName(partner.getBankName())
                        .bankAccountName(partner.getBankAccountName())
                        .bankAccountNumber(partner.getBankAccountNumber())
                        .build();
            } else {
                throw new CustomException.ResourceNotFoundException("Partner not found for the authenticated user.");
            }
        } else {
            throw new CustomException.ResourceNotFoundException("User not found.");
        }
    }

    @Override
    public void updateBankInformation(PartnerUpdateRequest request) {
        String username = tokenHolder.getUsername();
        Optional<User> userOptional = userRepository.findByUsername(username);

        if (userOptional.isPresent()) {
            User user = userOptional.get();
            Optional<Partner> partnerOptional = partnerRepository.findByUser(user);

            if (partnerOptional.isPresent()) {
                Partner partner = partnerOptional.get();
                
                partner.setBankName(request.getBankName());
                partner.setBankAccountName(request.getBankAccountName());
                partner.setBankAccountNumber(request.getBankAccountNumber());
                partnerRepository.save(partner);
            } else {
                throw new CustomException.ResourceNotFoundException("Partner not found for the authenticated user.");
            }
        } else {
            throw new CustomException.ResourceNotFoundException("User not found.");
        }
    }
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/service/impl/PayoutServiceImpl.java
---

package com.doaibu.rebikeapi.service.impl;

import com.doaibu.rebikeapi.constant.BookingStatus;
import com.doaibu.rebikeapi.constant.PayoutStatus;
import com.doaibu.rebikeapi.dto.request.PayoutRequest;
import com.doaibu.rebikeapi.dto.request.ProcessPayoutRequest;
import com.doaibu.rebikeapi.dto.response.PayoutResponse;
import com.doaibu.rebikeapi.entity.Partner;
import com.doaibu.rebikeapi.entity.Payout;
import com.doaibu.rebikeapi.entity.Transaction;
import com.doaibu.rebikeapi.entity.User;
import com.doaibu.rebikeapi.exception.CustomException;
import com.doaibu.rebikeapi.repository.PayoutRepository;
import com.doaibu.rebikeapi.repository.TransactionRepository;
import com.doaibu.rebikeapi.repository.UserRepository;
import com.doaibu.rebikeapi.service.PayoutService;
import com.doaibu.rebikeapi.util.TokenHolder;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class PayoutServiceImpl implements PayoutService {

    private final PayoutRepository payoutRepository;
    private final UserRepository userRepository;
    private final TransactionRepository transactionRepository;
    private final TokenHolder tokenHolder;

    @Override
    @Transactional
    public PayoutResponse requestPayout(PayoutRequest request) {
        User partnerUser = userRepository.findByUsername(tokenHolder.getUsername())
                .orElseThrow(() -> new CustomException.ResourceNotFoundException("Partner not found."));
        
                Partner partnerDetails = partnerUser.getPartnerDetail();

        if (partnerDetails.getBankName() == null || partnerDetails.getBankAccountNumber() == null) {
            throw new CustomException.BadRequestException("Bank information is incomplete. Please complete it in your profile.");
        }

        BigDecimal totalRevenue = transactionRepository.findByBike_Partner(partnerUser).stream()
                .filter(t -> t.getBookingStatus() == BookingStatus.COMPLETED)
                .map(Transaction::getTotalCost)
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        BigDecimal totalPaidOut = payoutRepository.findByPartnerOrderByRequestedAtDesc(partnerUser).stream()
                .filter(p -> p.getStatus() == PayoutStatus.APPROVED)
                .map(Payout::getAmount)
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        BigDecimal availableBalance = totalRevenue.subtract(totalPaidOut);

        if (request.getAmount().compareTo(availableBalance) > 0) {
            throw new CustomException.BadRequestException("The withdrawal amount exceeds the available balance. Balance is IDR " + availableBalance);
        }

        if (request.getAmount().compareTo(BigDecimal.valueOf(10000)) < 0) {
            throw new CustomException.BadRequestException("The minimum withdrawal amount is IDR 10.000");
        }

        String bankDetails = String.format("%s - %s a/n %s",
                partnerDetails.getBankName(),
                partnerDetails.getBankAccountNumber(),
                partnerDetails.getBankAccountName());

        Payout payout = Payout.builder()
                .partner(partnerUser)
                .amount(request.getAmount())
                .status(PayoutStatus.PENDING)
                .requestedAt(LocalDateTime.now())
                .bankDetailsSnapshot(bankDetails)
                .build();

        payoutRepository.save(payout);
        return mapToResponse(payout);
    }

    @Override
    @Transactional
    public void processPayout(String payoutId, ProcessPayoutRequest request) {
        Payout payout = payoutRepository.findById(payoutId)
                .orElseThrow(() -> new CustomException.ResourceNotFoundException("Payout request not found."));

        if (payout.getStatus() != PayoutStatus.PENDING) {
            throw new CustomException.BadRequestException("This payout has already been processed.");
        }

        payout.setStatus(request.getStatus());
        payout.setNotes(request.getNotes());
        payout.setProcessedAt(LocalDateTime.now());
        payoutRepository.save(payout);
    }

    @Override
    public List<PayoutResponse> getPayoutsForPartner() {
        User partnerUser = userRepository.findByUsername(tokenHolder.getUsername())
                .orElseThrow(() -> new CustomException.ResourceNotFoundException("Partner not found."));
        
                return payoutRepository.findByPartnerOrderByRequestedAtDesc(partnerUser).stream()
                .map(this::mapToResponse)
                .collect(Collectors.toList());
    }

    @Override
    public List<PayoutResponse> getAllPayouts() {
        return payoutRepository.findAll().stream()
                .map(this::mapToResponse)
                .collect(Collectors.toList());
    }

    private PayoutResponse mapToResponse(Payout payout) {
        return PayoutResponse.builder()
                .id(payout.getId())
                .partnerName(payout.getPartner().getFirstName())
                .amount(payout.getAmount())
                .status(payout.getStatus())
                .requestedAt(payout.getRequestedAt())
                .processedAt(payout.getProcessedAt())
                .bankDetailsSnapshot(payout.getBankDetailsSnapshot())
                .notes(payout.getNotes())
                .build();
    }
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/service/impl/PickupPointServiceImpl.java
---

package com.doaibu.rebikeapi.service.impl;

import com.doaibu.rebikeapi.dto.request.PickupPointRequest;
import com.doaibu.rebikeapi.dto.response.PickupPointResponse;
import com.doaibu.rebikeapi.entity.PickupPoint;
import com.doaibu.rebikeapi.exception.CustomException;
import com.doaibu.rebikeapi.repository.PickupPointRepository;
import com.doaibu.rebikeapi.service.PickupPointService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class PickupPointServiceImpl implements PickupPointService {

    private final PickupPointRepository pickupPointRepository;

    @Override
    public List<PickupPointResponse> getAllPickupPoints() {
        return pickupPointRepository.findAll().stream()
                .map(this::mapToPickupPointResponse)
                .collect(Collectors.toList());
    }

    @Override
    public PickupPointResponse createPickupPoint(PickupPointRequest request) {
        PickupPoint pickupPoint = PickupPoint.builder()
                .locationName(request.getLocationName())
                .address(request.getAddress())
                .build();

        pickupPointRepository.save(pickupPoint);
        return mapToPickupPointResponse(pickupPoint);
    }

    @Override
    public PickupPointResponse updatePickupPoint(String id, PickupPointRequest request) {
        PickupPoint pickupPoint = pickupPointRepository.findById(id)
                .orElseThrow(() -> new CustomException.ResourceNotFoundException("Pickup point not found."));

        pickupPoint.setLocationName(request.getLocationName());
        pickupPoint.setAddress(request.getAddress());
        pickupPointRepository.save(pickupPoint);
        return mapToPickupPointResponse(pickupPoint);
    }

    @Override
    public void deletePickupPoint(String id) {
        if (!pickupPointRepository.existsById(id)) {
            throw new CustomException.ResourceNotFoundException("Pickup point not found.");
        }

        pickupPointRepository.deleteById(id);
    }

    public PickupPointResponse mapToPickupPointResponse(PickupPoint pickupPoint) {
        return PickupPointResponse.builder()
                .pickupPointID(pickupPoint.getId())
                .locationName(pickupPoint.getLocationName())
                .address(pickupPoint.getAddress())
                .build();
    }
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/service/impl/RoleServiceImpl.java
---

package com.doaibu.rebikeapi.service.impl;

import com.doaibu.rebikeapi.constant.UserRole;
import com.doaibu.rebikeapi.entity.Role;
import com.doaibu.rebikeapi.repository.RoleRepository;
import com.doaibu.rebikeapi.service.RoleService;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
@RequiredArgsConstructor
public class RoleServiceImpl implements RoleService {
    private final RoleRepository roleRepository;

    @Override
    public Optional<Role> findByName(UserRole name) {
        return roleRepository.findByName(name);
    }

    @Override
    public Role save(Role role) {
        return roleRepository.save(role);
    }

    @Override
    public Role getOrCreate(UserRole name) {
        return findByName(name)
                .orElseGet(() -> {
                    Role role = new Role();
                    role.setName(name);
                    return save(role);
                });
    }
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/service/impl/TransactionServiceImpl.java
---

package com.doaibu.rebikeapi.service.impl;

import com.doaibu.rebikeapi.constant.BikeStatus;
import com.doaibu.rebikeapi.constant.BookingStatus;
import com.doaibu.rebikeapi.constant.PaymentStatus;
import com.doaibu.rebikeapi.dto.request.CreatePaymentRequest;
import com.doaibu.rebikeapi.dto.request.TransactionRequest;
import com.doaibu.rebikeapi.dto.response.*;
import com.doaibu.rebikeapi.dto.response.other.PagedResponse;
import com.doaibu.rebikeapi.entity.Bike;
import com.doaibu.rebikeapi.entity.Transaction;
import com.doaibu.rebikeapi.entity.User;
import com.doaibu.rebikeapi.exception.CustomException;
import com.doaibu.rebikeapi.repository.BikeRepository;
import com.doaibu.rebikeapi.repository.TransactionRepository;
import com.doaibu.rebikeapi.repository.UserRepository;
import com.doaibu.rebikeapi.service.MidtransService;
import com.doaibu.rebikeapi.service.TransactionService;
import com.doaibu.rebikeapi.util.TokenHolder;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.orm.ObjectOptimisticLockingFailureException;
import org.springframework.stereotype.Service;
import java.math.BigDecimal;
import java.time.Month;
import java.time.temporal.ChronoUnit;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class TransactionServiceImpl implements TransactionService {

    private final TransactionRepository transactionRepository;
    private final MidtransService midtransService;
    private final BikeRepository bikeRepository;
    private final UserRepository userRepository;
    private final TokenHolder tokenHolder;

    @Override
    @Transactional
    public MidtransChargeResponse createBooking(TransactionRequest request) {
        try {
            User customer = userRepository.findByUsername(tokenHolder.getUsername())
                    .orElseThrow(() -> new CustomException.ResourceNotFoundException("Customer not found."));

            Bike bike = bikeRepository.findById(request.getBikeID().toString())
                    .orElseThrow(() -> new CustomException.ResourceNotFoundException("Bike not found."));

            if (bike.getStatus() != BikeStatus.AVAILABLE) {
                throw new CustomException.BadRequestException("Bike is not available for booking.");
            }

            long days = ChronoUnit.DAYS.between(request.getStartDate(), request.getEndDate()) + 1;
            BigDecimal baseCost = bike.getWeekdayPricePerDay().multiply(BigDecimal.valueOf(days));

            Transaction transaction = Transaction.builder()
                    .bike(bike)
                    .customer(customer)
                    .startDate(request.getStartDate())
                    .endDate(request.getEndDate())
                    .baseCost(baseCost)
                    .additionalCosts(BigDecimal.ZERO)
                    .totalCost(baseCost)
                    .paymentStatus(PaymentStatus.UNPAID)
                    .bookingStatus(BookingStatus.PENDING)
                    .paymentProofUrl(null)
                    .build();

            transactionRepository.save(transaction);

            CreatePaymentRequest payRequest = CreatePaymentRequest.builder()
                    .orderId(transaction.getId())
                    .grossAmount(baseCost)
                    .customerName(customer.getFirstName() + " " + customer.getLastName())
                    .customerEmail(customer.getEmail())
                    .bank("BRI")
                    .build();


            return midtransService.createTransaction(payRequest);
        } catch (ObjectOptimisticLockingFailureException e) {
            throw new CustomException.ConflictException("Sorry, this bike has just been reserved by someone else.");
        }
    }

    @Override
    public List<TransactionResponse> getTransactionHistory() {
        User customer = userRepository.findByUsername(tokenHolder.getUsername())
                .orElseThrow(() -> new CustomException.ResourceNotFoundException("Customer not found."));

        return transactionRepository.findByCustomer(customer).stream()
                .map(this::mapToTransactionResponse)
                .collect(Collectors.toList());
    }

    @Override
    public TransactionDetailResponse getTransactionDetails(String transactionId) {
        Transaction transaction = transactionRepository.findById(transactionId)
                .orElseThrow(() -> new CustomException.ResourceNotFoundException("Transaction not found."));

        return mapToTransactionDetailedResponse(transaction);
    }

    @Transactional
    @Override
    public void uploadPaymentProof(String transactionId, String paymentProofUrl) {
        Transaction transaction = transactionRepository.findById(transactionId)
                .orElseThrow(() -> new CustomException.ResourceNotFoundException("Transaction not found."));

        transaction.setPaymentStatus(PaymentStatus.PENDING_CONFIRMATION);
        transactionRepository.save(transaction);
    }

    @Override
    @Transactional
    public void verifyPayment(String transactionId, boolean isValid, String reason) {
        Transaction transaction = transactionRepository.findById(transactionId)
                .orElseThrow(() -> new CustomException.ResourceNotFoundException("Transaction not found."));

        if (isValid) {
            transaction.setPaymentStatus(PaymentStatus.PAID);
            transaction.setBookingStatus(BookingStatus.CONFIRMED);
        } else {
            transaction.setPaymentStatus(PaymentStatus.REFUNDED);
            transaction.setBookingStatus(BookingStatus.CANCELLED);
        }

        transactionRepository.save(transaction);
    }

    @Override
    @Transactional
    public void confirmTransaction(String transactionId, BookingStatus status) {
        User partner = userRepository.findByUsername(tokenHolder.getUsername())
                .orElseThrow(() -> new CustomException.ResourceNotFoundException("Partner not found."));

        Transaction transaction = transactionRepository.findById(transactionId)
                .orElseThrow(() -> new CustomException.ResourceNotFoundException("Transaction not found."));

        if (!Objects.equals(transaction.getBike().getPartner().getId(), partner.getId())) {
            throw new CustomException.AuthorizationException("You are not authorized to modify this transaction.");
        }

        if (transaction.getBookingStatus() != BookingStatus.PENDING) {
            throw new CustomException.BadRequestException("Only pending transactions can be confirmed or cancelled.");
        }

        if (status == BookingStatus.CONFIRMED) {
            transaction.setBookingStatus(BookingStatus.CONFIRMED);
        } else if (status == BookingStatus.CANCELLED) {
            transaction.setBookingStatus(BookingStatus.CANCELLED);
        } else {
            throw new CustomException.BadRequestException("Invalid status provided.");
        }

        transactionRepository.save(transaction);
    }

    @Override
    public List<TransactionDetailResponse> getTransactionsForPartner() {
        User partner = userRepository.findByUsername(tokenHolder.getUsername())
                .orElseThrow(() -> new CustomException.ResourceNotFoundException("Partner not found."));

        return transactionRepository.findByBike_Partner(partner).stream()
                .map(this::mapToTransactionDetailedResponse)
                .collect(Collectors.toList());
    }

    @Override
    public PagedResponse<TransactionDetailResponse> getAllTransactions(Pageable pageable) {
        Page<Transaction> transactionPage = transactionRepository.findAll(pageable);

        List<TransactionDetailResponse> transactionResponses = transactionPage.stream()
                .map(this::mapToTransactionDetailedResponse)
                .collect(Collectors.toList());

        return PagedResponse.<TransactionDetailResponse>builder()
                .data(transactionResponses)
                .page(transactionPage.getNumber())
                .size(transactionPage.getSize())
                .totalElements(transactionPage.getTotalElements())
                .totalPages(transactionPage.getTotalPages())
                .build();
    }

    @Override
    public FinancialSummaryResponse getFinancialSummaryForPartner() {
        User partner = userRepository.findByUsername(tokenHolder.getUsername())
                .orElseThrow(() -> new CustomException.ResourceNotFoundException("Partner not found."));

        List<Transaction> transactions = transactionRepository.findByBike_Partner(partner);

        BigDecimal totalRevenue = transactions.stream()
                .filter(t -> t.getBookingStatus() == BookingStatus.COMPLETED)
                .map(Transaction::getTotalCost)
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        int totalCompleted = (int) transactions.stream()
                .filter(t -> t.getBookingStatus() == BookingStatus.COMPLETED)
                .count();

        int totalPending = (int) transactions.stream()
                .filter(t -> t.getBookingStatus() == BookingStatus.PENDING)
                .count();

        return FinancialSummaryResponse.builder()
                .totalRevenue(totalRevenue)
                .totalCompletedTransactions(totalCompleted)
                .totalPendingTransactions(totalPending)
                .build();
    }

    @Override
    public RevenueTrendResponse getRevenueTrendForPartner() {
        User partner = userRepository.findByUsername(tokenHolder.getUsername())
                .orElseThrow(() -> new CustomException.ResourceNotFoundException("Partner not found."));
        List<Transaction> transactions = transactionRepository.findByBike_Partner(partner);

        Map<Month, BigDecimal> monthlyRevenue = transactions.stream()
                .filter(t -> t.getBookingStatus() == BookingStatus.COMPLETED)
                .collect(Collectors.groupingBy(
                        t -> t.getStartDate().getMonth(),
                        Collectors.mapping(Transaction::getTotalCost, Collectors.reducing(BigDecimal.ZERO, BigDecimal::add))
                ));

        List<String> labels = Arrays.asList("Jan", "Feb", "Mar", "Apr", "Mei", "Jun");
        List<BigDecimal> data = labels.stream()
                .map(monthStr -> {
                    Month month = Month.valueOf(monthStr.toUpperCase());
                    return monthlyRevenue.getOrDefault(month, BigDecimal.ZERO);
                })
                .collect(Collectors.toList());

        return RevenueTrendResponse.builder()
                .labels(labels)
                .data(data)
                .build();
    }

    private TransactionResponse mapToTransactionResponse(Transaction transaction) {
        return TransactionResponse.builder()
                .transactionID(transaction.getId())
                .startDate(transaction.getStartDate())
                .endDate(transaction.getEndDate())
                .baseCost(transaction.getBaseCost())
                .totalCost(transaction.getTotalCost())
                .paymentStatus(transaction.getPaymentStatus())
                .bookingStatus(transaction.getBookingStatus())
                .build();
    }

    private TransactionDetailResponse mapToTransactionDetailedResponse(Transaction transaction) {
        return TransactionDetailResponse.builder()
                .transactionID(transaction.getId())
                .startDate(transaction.getStartDate())
                .endDate(transaction.getEndDate())
                .baseCost(transaction.getBaseCost())
                .totalCost(transaction.getTotalCost())
                .paymentStatus(transaction.getPaymentStatus())
                .bookingStatus(transaction.getBookingStatus())
                .bike(mapToBikeResponse(transaction.getBike()))
                .customer(mapToUserResponse(transaction.getCustomer()))
                .build();
    }

    private BikeResponse mapToBikeResponse(Bike bike) {
        return BikeResponse.builder()
                .bikeID(bike.getId())
                .name(bike.getName())
                .brand(bike.getBrand())
                .weekdayPricePerDay(bike.getWeekdayPricePerDay())
                .build();
    }

    private UserResponse mapToUserResponse(User user) {
        return UserResponse.builder()
                .userID(user.getId())
                .firstName(user.getFirstName())
                .lastName(user.getLastName())
                .email(user.getEmail())
                .phoneNumber(user.getPhoneNumber())
                .build();
    }
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/service/impl/UserDetailsServiceImpl.java
---

package com.doaibu.rebikeapi.service.impl;

import com.doaibu.rebikeapi.repository.UserRepository;

import lombok.RequiredArgsConstructor;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class UserDetailsServiceImpl implements UserDetailsService {

    private final UserRepository userRepository;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        return userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("Username not found"));
    }
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/service/impl/UserServiceImpl.java
---

package com.doaibu.rebikeapi.service.impl;

import com.doaibu.rebikeapi.constant.UserRole;
import com.doaibu.rebikeapi.dto.request.*;
import com.doaibu.rebikeapi.dto.response.AdminPartnerResponse;
import com.doaibu.rebikeapi.dto.response.LoginResponse;
import com.doaibu.rebikeapi.dto.response.RegisterResponse;
import com.doaibu.rebikeapi.dto.response.other.PagedResponse;
import com.doaibu.rebikeapi.entity.Partner;
import com.doaibu.rebikeapi.entity.Role;
import com.doaibu.rebikeapi.entity.User;
import com.doaibu.rebikeapi.exception.CustomException;
import com.doaibu.rebikeapi.repository.PartnerRepository;
import com.doaibu.rebikeapi.repository.UserRepository;
import com.doaibu.rebikeapi.security.JwtUtil;
import com.doaibu.rebikeapi.service.EmailService;
import com.doaibu.rebikeapi.service.RoleService;
import com.doaibu.rebikeapi.service.UserService;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import java.security.SecureRandom;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class UserServiceImpl implements UserService {

    private final UserRepository userRepository;
    private final RoleService roleService;
    private final PasswordEncoder passwordEncoder;
    private final PartnerRepository partnerRepository;
    private final EmailService emailService;
    private final JwtUtil jwtUtil;
    private final Random random = new SecureRandom();

    @Override
    @Transactional
    public RegisterResponse registerCustomer(RegisterCustomerRequest request) {
        if (userRepository.existsByEmail(request.getEmail())) {
            throw new CustomException.ConflictException("Email sudah terdaftar.");
        }
        Set<Role> customerRole = new HashSet<>();
        customerRole.add(roleService.getOrCreate(UserRole.CUSTOMER));

        User user = buildUser(null, null, request.getUsername(), request.getEmail(), request.getPassword(), request.getPhoneNumber(), customerRole);
        userRepository.save(user);
        return mapToRegisterResponse(user);
    }

    @Override
    @Transactional
    public RegisterResponse registerPartner(RegisterPartnerRequest request) {
        if (userRepository.existsByEmail(request.getEmail())) {
            throw new CustomException.ConflictException("Email sudah terdaftar.");
        }
        Set<Role> partnerRole = new HashSet<>();
        partnerRole.add(roleService.getOrCreate(UserRole.PARTNER));

        User user = buildUser(null, null, request.getUsername(), request.getEmail(), request.getPassword(), request.getPhoneNumber(), partnerRole);

        Partner partner = Partner.builder()
                .user(user)
                .isVerified(false)
                .build();
        user.setPartnerDetail(partner);

        userRepository.save(user);
        return mapToRegisterResponse(user);
    }

    @Override
    @Transactional
    public void verifyEmailOtp(String email, String otp) {
        User user = userRepository.findByEmail(email);

        if (user == null) {
            throw new CustomException.ResourceNotFoundException("User not found.");
        }

        if (user.isEmailVerified()) {
            throw new CustomException.BadRequestException("Email has been verified.");
        }

        if (user.getOtpExpiryTime().isBefore(LocalDateTime.now())) {
            throw new CustomException.BadRequestException("OTP code has expired.");
        }

        if (!passwordEncoder.matches(otp, user.getVerificationOtp())) {
            throw new CustomException.BadRequestException("OTP code does not match.");
        }

        user.setEmailVerified(true);
        user.setEnabled(true);
        user.setVerificationOtp(null);
        user.setOtpExpiryTime(null);
        userRepository.save(user);
    }

    @Override
    @Transactional
    public void resendVerificationOtp(String email) {
        User user = userRepository.findByEmail(email);

        if (user == null) {
            throw new CustomException.ResourceNotFoundException("User not found.");
        }

        if (user.isEmailVerified()) {
            throw new CustomException.BadRequestException("Email has been verified.");
        }

        String newOtp = generateOtp();
        user.setVerificationOtp(passwordEncoder.encode(newOtp));
        user.setOtpExpiryTime(LocalDateTime.now().plusMinutes(10));
        userRepository.save(user);

        sendVerificationEmail(user, newOtp);
    }

    @Override
    public LoginResponse login(LoginRequest request) {
        User user = userRepository.findByEmail(request.getEmail());
        if (user == null || !passwordEncoder.matches(request.getPassword(), user.getPassword())) {
            throw new CustomException.AuthenticationException("Email or password is incorrect.");
        }
        if (!user.isEmailVerified()) {
            throw new CustomException.AuthorizationException("Email is not verified. Please try again.");
        }
        if (!user.isEnabled()) {
            throw new CustomException.AuthorizationException("Your account is disabled.");
        }

        String token = jwtUtil.generateToken(user);
        return LoginResponse.builder()
                .roles(user.getRoles().stream().map(Role::getName).collect(Collectors.toSet()))
                .token(token)
                .build();
    }

    @Override
    @Transactional
    public PagedResponse<AdminPartnerResponse> getAllPartners(Pageable pageable) {
        Set<Role> roles = new HashSet<>();
        roles.add(roleService.getOrCreate(UserRole.PARTNER));

        Page<User> userPage = userRepository.findByRolesIn(roles, pageable);

        List<AdminPartnerResponse> partnerResponses = userPage.getContent().stream()
                .map(this::mapToAdminPartnerResponse)
                .collect(Collectors.toList());

        return PagedResponse.<AdminPartnerResponse>builder()
                .data(partnerResponses)
                .page(userPage.getNumber())
                .size(userPage.getSize())
                .totalElements(userPage.getTotalElements())
                .totalPages(userPage.getTotalPages())
                .build();
    }

    @Override
    public AdminPartnerResponse getPartnerById(String partnerId) {
        User user = userRepository.findById(partnerId)
                .orElseThrow(() -> new CustomException.ResourceNotFoundException("Partner not found."));

        if (user.getRoles().stream().noneMatch(role -> role.getName().equals(UserRole.PARTNER))) {
            throw new CustomException.BadRequestException("User is not a partner.");
        }

        return mapToAdminPartnerResponse(user);
    }

    @Override
    @Transactional
    public void verifyPartner(String partnerId, boolean isVerified) {
        Partner partner = partnerRepository.findById(partnerId)
                .orElseThrow(() -> new CustomException.ResourceNotFoundException("Partner not found."));

        partner.setVerified(isVerified);
        partnerRepository.save(partner);
    }

    @Override
    @Transactional
    public void processForgotPassword(String email, String feBaseUrl) {
        User user = userRepository.findByEmail(email);

        if (user == null) {
            return;
        }

        String otp = generateOtp();
        user.setResetPasswordToken(passwordEncoder.encode(otp));
        user.setResetPasswordTokenExpiry(LocalDateTime.now().plusMinutes(10));
        userRepository.save(user);

        String emailText = "Anda menerima email ini karena ada permintaan untuk mereset password akun Rebike Anda.\n\n"
                + "Gunakan kode OTP ini untuk melanjutkan: \n\n"
                + "Kode OTP: " + otp + "\n\n"
                + "PENTING: Kode ini hanya berlaku selama 10 menit. Jika Anda tidak meminta ini, abaikan email ini.";

        emailService.sendEmail(user.getEmail(), "Reset Password Rebike (Berlaku 10 Menit)", emailText);
    }

    @Override
    @Transactional
    public void resetPasswordWithOtp(ResetPasswordWithOtpRequest request) {
        User user = userRepository.findByEmail(request.getEmail());

        if (user == null) {
            throw new CustomException.ResourceNotFoundException("User not found.");
        }

        if (user.getResetPasswordToken() == null || user.getResetPasswordTokenExpiry().isBefore(LocalDateTime.now())) {
            throw new CustomException.BadRequestException("OTP code has expired.");
        }

        if (!passwordEncoder.matches(request.getOtp(), user.getResetPasswordToken())) {
            throw new CustomException.BadRequestException("OTP code does not match.");
        }

        user.setPassword(passwordEncoder.encode(request.getNewPassword()));
        user.setResetPasswordToken(null);
        user.setResetPasswordTokenExpiry(null);
        userRepository.save(user);
    }

    @Override
    @Transactional
    public void changePassword(String username, ChangePasswordRequest request) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found."));

        if (!passwordEncoder.matches(request.getOldPassword(), user.getPassword())) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Old password is incorrect.");
        }

        if (!request.getNewPassword().equals(request.getConfirmPassword())) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                    "Confirm password does not match.");
        }

        user.setPassword(passwordEncoder.encode(request.getNewPassword()));
        userRepository.save(user);
    }

    @Override
    @Transactional
    public User processOAuthPostLogin(String email, String name) {
        User existUser = userRepository.findByEmail(email);

        if (existUser != null) {
            return existUser;
        } else {
            Set<Role> customerRole = new HashSet<>();
            customerRole.add(roleService.getOrCreate(UserRole.CUSTOMER));

            User newUser = User.builder()
                    .email(email)
                    .username(email)
                    .firstName(name)
                    .password(passwordEncoder.encode(UUID.randomUUID().toString()))
                    .roles(customerRole)
                    .createdAt(LocalDateTime.now())
                    .isAccountNonExpired(true)
                    .isAccountNonLocked(true)
                    .isCredentialsNonExpired(true)
                    .isEnabled(true)
                    .isEmailVerified(true)
                    .build();

            return userRepository.save(newUser);
        }
    }

    private String generateOtp() {
        return String.format("%06d", random.nextInt(999999));
    }

    private void sendVerificationEmail(User user, String otp) {
        String emailText = "Gunakan kode OTP ini untuk verifikasi email Rebike Anda.\n\n"
                + "Kode OTP: " + otp + "\n\n"
                + "PENTING: Kode ini hanya berlaku selama 10 menit. Jangan berikan kode ini kepada siapapun.";
        emailService.sendEmail(user.getEmail(), "Verifikasi Email Rebike (Berlaku 10 Menit)", emailText);
    }

    private User buildUser(String firstName, String lastName, String username, String email, String password, String phoneNumber, Set<Role> roles) {
        String otp = generateOtp();

        String finalFirstName = (firstName == null || firstName.isBlank()) ? username : firstName;
        String finalLastName = (lastName == null || lastName.isBlank()) ? "" : lastName;

        User user = User.builder()
                .firstName(finalFirstName)
                .lastName(finalLastName)
                .username(username)
                .email(email)
                .password(passwordEncoder.encode(password))
                .phoneNumber(phoneNumber)
                .roles(roles)
                .createdAt(LocalDateTime.now())
                .isAccountNonExpired(true)
                .isAccountNonLocked(true)
                .isCredentialsNonExpired(true)
                .isEnabled(false)
                .isEmailVerified(false)
                .verificationOtp(passwordEncoder.encode(otp))
                .otpExpiryTime(LocalDateTime.now().plusMinutes(10))
                .build();

        sendVerificationEmail(user, otp);
        return user;
    }

    private RegisterResponse mapToRegisterResponse(User user) {
        return RegisterResponse.builder()
                .userID(user.getId())
                .email(user.getEmail())
                .build();
    }

    private AdminPartnerResponse mapToAdminPartnerResponse(User user) {
        Partner partnerDetails = user.getPartnerDetail();
        return AdminPartnerResponse.builder()
                .id(user.getId())
                .name(user.getFirstName() + " " + user.getLastName())
                .email(user.getEmail())
                .locationName(partnerDetails != null ? partnerDetails.getLocationName() : "N/A")
                .totalBikes(user.getOwnedBikes() != null ? user.getOwnedBikes().size() : 0)
                .isVerified(partnerDetails != null && partnerDetails.isVerified())
                .build();
    }
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/service/AdminDashboardService.java
---

package com.doaibu.rebikeapi.service;

import com.doaibu.rebikeapi.dto.response.DashboardSummaryResponse;

public interface AdminDashboardService {
    DashboardSummaryResponse getDashboardSummary();
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/service/BikeService.java
---

package com.doaibu.rebikeapi.service;

import com.doaibu.rebikeapi.constant.BikeStatus;
import com.doaibu.rebikeapi.dto.request.BikeRequest;
import com.doaibu.rebikeapi.dto.response.BikeDetailResponse;
import com.doaibu.rebikeapi.dto.response.BikeResponse;

import java.util.List;

public interface BikeService {
    BikeResponse addBike(BikeRequest request);

    List<BikeResponse> getAllBikes();

    BikeDetailResponse getBikeById(String id);

    BikeResponse updateBike(String id, BikeRequest request);

    void deleteBike(String id);

    BikeResponse updateBikeStatus(String bikeId, BikeStatus status);
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/service/EmailService.java
---

package com.doaibu.rebikeapi.service;

public interface EmailService {
    void sendEmail(String to, String subject, String text);
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/service/MidtransService.java
---

package com.doaibu.rebikeapi.service;

import java.util.Map;

import com.doaibu.rebikeapi.dto.request.CreatePaymentRequest;
import com.doaibu.rebikeapi.dto.response.MidtransChargeResponse;

public interface MidtransService {
    MidtransChargeResponse createTransaction(CreatePaymentRequest request);

    void handleNotification(Map<String, Object> payload);
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/service/PartnerService.java
---

package com.doaibu.rebikeapi.service;

import com.doaibu.rebikeapi.dto.request.PartnerDetailUpdateRequest;
import com.doaibu.rebikeapi.dto.request.PartnerUpdateRequest;
import com.doaibu.rebikeapi.dto.response.PartnerDetailResponse;

public interface PartnerService {
    void updatePartnerProfile(PartnerDetailUpdateRequest request);

    PartnerDetailResponse getBankInformation();

    void updateBankInformation(PartnerUpdateRequest request);
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/service/PayoutService.java
---

package com.doaibu.rebikeapi.service;

import com.doaibu.rebikeapi.dto.request.PayoutRequest;
import com.doaibu.rebikeapi.dto.request.ProcessPayoutRequest;
import com.doaibu.rebikeapi.dto.response.PayoutResponse;

import java.util.List;

public interface PayoutService {
    PayoutResponse requestPayout(PayoutRequest request);
    void processPayout(String payoutId, ProcessPayoutRequest request);
    List<PayoutResponse> getPayoutsForPartner();
    List<PayoutResponse> getAllPayouts();
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/service/PickupPointService.java
---

package com.doaibu.rebikeapi.service;

import com.doaibu.rebikeapi.dto.request.PickupPointRequest;
import com.doaibu.rebikeapi.dto.response.PickupPointResponse;

import java.util.List;

public interface PickupPointService {
    List<PickupPointResponse> getAllPickupPoints();

    PickupPointResponse createPickupPoint(PickupPointRequest request);
    
    PickupPointResponse updatePickupPoint(String id, PickupPointRequest request);

    void deletePickupPoint(String id);
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/service/RoleService.java
---

package com.doaibu.rebikeapi.service;

import com.doaibu.rebikeapi.constant.UserRole;
import com.doaibu.rebikeapi.entity.Role;

import java.util.Optional;

public interface RoleService {
    Optional<Role> findByName(UserRole name);

    Role save(Role role);

    Role getOrCreate(UserRole name);
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/service/TransactionService.java
---

package com.doaibu.rebikeapi.service;

import com.doaibu.rebikeapi.constant.BookingStatus;
import com.doaibu.rebikeapi.dto.request.TransactionRequest;
import com.doaibu.rebikeapi.dto.response.*;
import com.doaibu.rebikeapi.dto.response.other.PagedResponse;
import org.springframework.data.domain.Pageable;

import java.util.List;

public interface TransactionService {
    MidtransChargeResponse createBooking(TransactionRequest request);

    PagedResponse<TransactionDetailResponse> getAllTransactions(Pageable pageable);

    List<TransactionResponse> getTransactionHistory();

    TransactionDetailResponse getTransactionDetails(String transactionId);

    void verifyPayment(String transactionId, boolean isValid, String reason);

    void uploadPaymentProof(String transactionId, String paymentProofUrl);


    List<TransactionDetailResponse> getTransactionsForPartner();


    void confirmTransaction(String transactionId, BookingStatus status);

    FinancialSummaryResponse getFinancialSummaryForPartner();

    RevenueTrendResponse getRevenueTrendForPartner();
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/service/UserService.java
---

package com.doaibu.rebikeapi.service;

import com.doaibu.rebikeapi.dto.request.*;
import com.doaibu.rebikeapi.dto.response.AdminPartnerResponse;
import com.doaibu.rebikeapi.dto.response.LoginResponse;
import com.doaibu.rebikeapi.dto.response.RegisterResponse;
import com.doaibu.rebikeapi.dto.response.other.PagedResponse;
import com.doaibu.rebikeapi.entity.User;
import org.springframework.data.domain.Pageable;

public interface UserService {
    RegisterResponse registerCustomer(RegisterCustomerRequest request);

    RegisterResponse registerPartner(RegisterPartnerRequest request);

    void verifyEmailOtp(String email, String otp);

    void resendVerificationOtp(String email);

    LoginResponse login(LoginRequest request);

    PagedResponse<AdminPartnerResponse> getAllPartners(Pageable pageable);

    AdminPartnerResponse getPartnerById(String partnerId);

    void verifyPartner(String partnerId, boolean isVerified);

    void processForgotPassword(String email, String feBaseUrl);

    void resetPasswordWithOtp(ResetPasswordWithOtpRequest request);

    void changePassword(String username, ChangePasswordRequest request);

    User processOAuthPostLogin(String email, String name);
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/util/ResponseUtil.java
---

package com.doaibu.rebikeapi.util;

import com.doaibu.rebikeapi.dto.response.other.CommonResponse;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

public class ResponseUtil {
    public static <T> ResponseEntity<CommonResponse<T>> response(HttpStatus status, String message, T data) {
        CommonResponse<T> commonResponse = new CommonResponse<>();

        commonResponse.setMessage(message);
        commonResponse.setStatusCode(status.value());
        commonResponse.setData(data);

        return ResponseEntity.status(status).body(commonResponse);
    }
}



---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/util/TokenHolder.java
---

package com.doaibu.rebikeapi.util;

import com.doaibu.rebikeapi.security.JwtUtil;

import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
public class TokenHolder {
    private final HttpServletRequest request;
    private final JwtUtil jwtUtil;

    public String getUsername() {
        String token = request.getHeader("Authorization").substring(7);

        return jwtUtil.extractUsername(token);
    }
}


---
File: be-rebike/src/main/java/com/doaibu/rebikeapi/RebikeApplication.java
---

package com.doaibu.rebikeapi;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class RebikeApplication {

    public static void main(String[] args) {
        SpringApplication.run(RebikeApplication.class, args);
    }

}



---
File: be-rebike/src/test/java/com/doaibu/rebikeapi/RebikeApplicationTests.java
---

package com.doaibu.rebikeapi;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class RebikeApplicationTests {

    @Test
    void contextLoads() {
    }

}

